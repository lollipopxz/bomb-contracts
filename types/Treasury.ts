/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TreasuryInterface extends utils.Interface {
  functions: {
    "PERIOD()": FunctionFragment;
    "allocateSeigniorage()": FunctionFragment;
    "bbond()": FunctionFragment;
    "boardroom()": FunctionFragment;
    "boardroomAllocateSeigniorage(uint256)": FunctionFragment;
    "boardroomGovernanceRecoverUnsupported(address,uint256,address)": FunctionFragment;
    "boardroomSetLockUp(uint256,uint256)": FunctionFragment;
    "boardroomSetOperator(address)": FunctionFragment;
    "bondDepletionFloorPercent()": FunctionFragment;
    "bootstrapEpochs()": FunctionFragment;
    "bootstrapSupplyExpansionPercent()": FunctionFragment;
    "bshare()": FunctionFragment;
    "buyBonds(uint256,uint256)": FunctionFragment;
    "daoFund()": FunctionFragment;
    "daoFundSharedPercent()": FunctionFragment;
    "devFund()": FunctionFragment;
    "devFundSharedPercent()": FunctionFragment;
    "discountPercent()": FunctionFragment;
    "epoch()": FunctionFragment;
    "epochSupplyContractionLeft()": FunctionFragment;
    "excludedFromTotalSupply(uint256)": FunctionFragment;
    "getBondDiscountRate()": FunctionFragment;
    "getBondPremiumRate()": FunctionFragment;
    "getBurnableJiraLeft()": FunctionFragment;
    "getJiraCirculatingSupply()": FunctionFragment;
    "getJiraPrice()": FunctionFragment;
    "getJiraUpdatedPrice()": FunctionFragment;
    "getRedeemableBonds()": FunctionFragment;
    "getReserve()": FunctionFragment;
    "governanceRecoverUnsupported(address,uint256,address)": FunctionFragment;
    "initialize(address,address,address,address,address,uint256)": FunctionFragment;
    "initialized()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "jira()": FunctionFragment;
    "jiraOracle()": FunctionFragment;
    "jiraPriceCeiling()": FunctionFragment;
    "jiraPriceOne()": FunctionFragment;
    "maxDebtRatioPercent()": FunctionFragment;
    "maxDiscountRate()": FunctionFragment;
    "maxExpansionTiers(uint256)": FunctionFragment;
    "maxPremiumRate()": FunctionFragment;
    "maxSupplyContractionPercent()": FunctionFragment;
    "maxSupplyExpansionPercent()": FunctionFragment;
    "mintingFactorForPayingDebt()": FunctionFragment;
    "nextEpochPoint()": FunctionFragment;
    "operator()": FunctionFragment;
    "premiumPercent()": FunctionFragment;
    "premiumThreshold()": FunctionFragment;
    "previousEpochJiraPrice()": FunctionFragment;
    "redeemBonds(uint256,uint256)": FunctionFragment;
    "seigniorageExpansionFloorPercent()": FunctionFragment;
    "seigniorageSaved()": FunctionFragment;
    "setBoardroom(address)": FunctionFragment;
    "setBondDepletionFloorPercent(uint256)": FunctionFragment;
    "setBootstrap(uint256,uint256)": FunctionFragment;
    "setDiscountPercent(uint256)": FunctionFragment;
    "setExtraFunds(address,uint256,address,uint256)": FunctionFragment;
    "setJiraOracle(address)": FunctionFragment;
    "setJiraPriceCeiling(uint256)": FunctionFragment;
    "setMaxDebtRatioPercent(uint256)": FunctionFragment;
    "setMaxDiscountRate(uint256)": FunctionFragment;
    "setMaxExpansionTiersEntry(uint8,uint256)": FunctionFragment;
    "setMaxPremiumRate(uint256)": FunctionFragment;
    "setMaxSupplyContractionPercent(uint256)": FunctionFragment;
    "setMaxSupplyExpansionPercents(uint256)": FunctionFragment;
    "setMintingFactorForPayingDebt(uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setPremiumPercent(uint256)": FunctionFragment;
    "setPremiumThreshold(uint256)": FunctionFragment;
    "setSupplyTiersEntry(uint8,uint256)": FunctionFragment;
    "startTime()": FunctionFragment;
    "supplyTiers(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PERIOD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocateSeigniorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bbond", values?: undefined): string;
  encodeFunctionData(functionFragment: "boardroom", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boardroomAllocateSeigniorage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boardroomGovernanceRecoverUnsupported",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "boardroomSetLockUp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boardroomSetOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bondDepletionFloorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapSupplyExpansionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bshare", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyBonds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "daoFund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoFundSharedPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "devFund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devFundSharedPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochSupplyContractionLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludedFromTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondDiscountRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondPremiumRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnableJiraLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJiraCirculatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJiraPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJiraUpdatedPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemableBonds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceRecoverUnsupported",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "jira", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "jiraOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jiraPriceCeiling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jiraPriceOne",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtRatioPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDiscountRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxExpansionTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPremiumRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupplyContractionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupplyExpansionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintingFactorForPayingDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextEpochPoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "premiumPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "premiumThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousEpochJiraPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemBonds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seigniorageExpansionFloorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seigniorageSaved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoardroom",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondDepletionFloorPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBootstrap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscountPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraFunds",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setJiraOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setJiraPriceCeiling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtRatioPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDiscountRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxExpansionTiersEntry",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPremiumRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupplyContractionPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupplyExpansionPercents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFactorForPayingDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPremiumPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyTiersEntry",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyTiers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "PERIOD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bbond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boardroom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boardroomAllocateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardroomGovernanceRecoverUnsupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardroomSetLockUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardroomSetOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondDepletionFloorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapSupplyExpansionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bshare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyBonds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoFundSharedPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devFundSharedPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochSupplyContractionLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedFromTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondDiscountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondPremiumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBurnableJiraLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJiraCirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJiraPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJiraUpdatedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemableBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceRecoverUnsupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jira", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jiraOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jiraPriceCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jiraPriceOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtRatioPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDiscountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxExpansionTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPremiumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupplyContractionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupplyExpansionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintingFactorForPayingDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEpochPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "premiumPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousEpochJiraPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seigniorageExpansionFloorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seigniorageSaved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBoardroom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondDepletionFloorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBootstrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiscountPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJiraOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJiraPriceCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtRatioPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDiscountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxExpansionTiersEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPremiumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupplyContractionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupplyExpansionPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFactorForPayingDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyTiersEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyTiers",
    data: BytesLike
  ): Result;

  events: {
    "BoardroomFunded(uint256,uint256)": EventFragment;
    "BoughtBonds(address,uint256,uint256)": EventFragment;
    "BurnedBonds(address,uint256)": EventFragment;
    "DaoFundFunded(uint256,uint256)": EventFragment;
    "DevFundFunded(uint256,uint256)": EventFragment;
    "Initialized(address,uint256)": EventFragment;
    "RedeemedBonds(address,uint256,uint256)": EventFragment;
    "TreasuryFunded(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoardroomFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoughtBonds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnedBonds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoFundFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevFundFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedBonds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryFunded"): EventFragment;
}

export type BoardroomFundedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { timestamp: BigNumber; seigniorage: BigNumber }
>;

export type BoardroomFundedEventFilter = TypedEventFilter<BoardroomFundedEvent>;

export type BoughtBondsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; jiraAmount: BigNumber; bondAmount: BigNumber }
>;

export type BoughtBondsEventFilter = TypedEventFilter<BoughtBondsEvent>;

export type BurnedBondsEvent = TypedEvent<
  [string, BigNumber],
  { from: string; bondAmount: BigNumber }
>;

export type BurnedBondsEventFilter = TypedEventFilter<BurnedBondsEvent>;

export type DaoFundFundedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { timestamp: BigNumber; seigniorage: BigNumber }
>;

export type DaoFundFundedEventFilter = TypedEventFilter<DaoFundFundedEvent>;

export type DevFundFundedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { timestamp: BigNumber; seigniorage: BigNumber }
>;

export type DevFundFundedEventFilter = TypedEventFilter<DevFundFundedEvent>;

export type InitializedEvent = TypedEvent<
  [string, BigNumber],
  { executor: string; at: BigNumber }
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type RedeemedBondsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; jiraAmount: BigNumber; bondAmount: BigNumber }
>;

export type RedeemedBondsEventFilter = TypedEventFilter<RedeemedBondsEvent>;

export type TreasuryFundedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { timestamp: BigNumber; seigniorage: BigNumber }
>;

export type TreasuryFundedEventFilter = TypedEventFilter<TreasuryFundedEvent>;

export interface Treasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    allocateSeigniorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bbond(overrides?: CallOverrides): Promise<[string]>;

    boardroom(overrides?: CallOverrides): Promise<[string]>;

    boardroomAllocateSeigniorage(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boardroomGovernanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boardroomSetLockUp(
      _withdrawLockupEpochs: BigNumberish,
      _rewardLockupEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boardroomSetOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondDepletionFloorPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    bootstrapEpochs(overrides?: CallOverrides): Promise<[BigNumber]>;

    bootstrapSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bshare(overrides?: CallOverrides): Promise<[string]>;

    buyBonds(
      _jiraAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoFund(overrides?: CallOverrides): Promise<[string]>;

    daoFundSharedPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    devFund(overrides?: CallOverrides): Promise<[string]>;

    devFundSharedPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    discountPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochSupplyContractionLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    excludedFromTotalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBondDiscountRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rate: BigNumber }>;

    getBondPremiumRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rate: BigNumber }>;

    getBurnableJiraLeft(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _burnableJiraLeft: BigNumber }>;

    getJiraCirculatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getJiraPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { jiraPrice: BigNumber }>;

    getJiraUpdatedPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _jiraPrice: BigNumber }>;

    getRedeemableBonds(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _redeemableBonds: BigNumber }>;

    getReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    governanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _jira: string,
      _bbond: string,
      _bshare: string,
      _jiraOracle: string,
      _boardroom: string,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    jira(overrides?: CallOverrides): Promise<[string]>;

    jiraOracle(overrides?: CallOverrides): Promise<[string]>;

    jiraPriceCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    jiraPriceOne(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDebtRatioPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDiscountRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxExpansionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxPremiumRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSupplyContractionPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintingFactorForPayingDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextEpochPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    premiumPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    premiumThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    previousEpochJiraPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemBonds(
      _bondAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seigniorageExpansionFloorPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    seigniorageSaved(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBoardroom(
      _boardroom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondDepletionFloorPercent(
      _bondDepletionFloorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBootstrap(
      _bootstrapEpochs: BigNumberish,
      _bootstrapSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDiscountPercent(
      _discountPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExtraFunds(
      _daoFund: string,
      _daoFundSharedPercent: BigNumberish,
      _devFund: string,
      _devFundSharedPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJiraOracle(
      _jiraOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJiraPriceCeiling(
      _jiraPriceCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDebtRatioPercent(
      _maxDebtRatioPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDiscountRate(
      _maxDiscountRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxExpansionTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPremiumRate(
      _maxPremiumRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSupplyContractionPercent(
      _maxSupplyContractionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintingFactorForPayingDebt(
      _mintingFactorForPayingDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumPercent(
      _premiumPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumThreshold(
      _premiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupplyTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    supplyTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  allocateSeigniorage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bbond(overrides?: CallOverrides): Promise<string>;

  boardroom(overrides?: CallOverrides): Promise<string>;

  boardroomAllocateSeigniorage(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boardroomGovernanceRecoverUnsupported(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boardroomSetLockUp(
    _withdrawLockupEpochs: BigNumberish,
    _rewardLockupEpochs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boardroomSetOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondDepletionFloorPercent(overrides?: CallOverrides): Promise<BigNumber>;

  bootstrapEpochs(overrides?: CallOverrides): Promise<BigNumber>;

  bootstrapSupplyExpansionPercent(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bshare(overrides?: CallOverrides): Promise<string>;

  buyBonds(
    _jiraAmount: BigNumberish,
    targetPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoFund(overrides?: CallOverrides): Promise<string>;

  daoFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

  devFund(overrides?: CallOverrides): Promise<string>;

  devFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

  discountPercent(overrides?: CallOverrides): Promise<BigNumber>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  epochSupplyContractionLeft(overrides?: CallOverrides): Promise<BigNumber>;

  excludedFromTotalSupply(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBondDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

  getBondPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

  getBurnableJiraLeft(overrides?: CallOverrides): Promise<BigNumber>;

  getJiraCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getJiraPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getJiraUpdatedPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getRedeemableBonds(overrides?: CallOverrides): Promise<BigNumber>;

  getReserve(overrides?: CallOverrides): Promise<BigNumber>;

  governanceRecoverUnsupported(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _jira: string,
    _bbond: string,
    _bshare: string,
    _jiraOracle: string,
    _boardroom: string,
    _startTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  jira(overrides?: CallOverrides): Promise<string>;

  jiraOracle(overrides?: CallOverrides): Promise<string>;

  jiraPriceCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  jiraPriceOne(overrides?: CallOverrides): Promise<BigNumber>;

  maxDebtRatioPercent(overrides?: CallOverrides): Promise<BigNumber>;

  maxDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

  maxExpansionTiers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

  maxSupplyContractionPercent(overrides?: CallOverrides): Promise<BigNumber>;

  maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

  mintingFactorForPayingDebt(overrides?: CallOverrides): Promise<BigNumber>;

  nextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

  operator(overrides?: CallOverrides): Promise<string>;

  premiumPercent(overrides?: CallOverrides): Promise<BigNumber>;

  premiumThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  previousEpochJiraPrice(overrides?: CallOverrides): Promise<BigNumber>;

  redeemBonds(
    _bondAmount: BigNumberish,
    targetPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seigniorageExpansionFloorPercent(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seigniorageSaved(overrides?: CallOverrides): Promise<BigNumber>;

  setBoardroom(
    _boardroom: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondDepletionFloorPercent(
    _bondDepletionFloorPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBootstrap(
    _bootstrapEpochs: BigNumberish,
    _bootstrapSupplyExpansionPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDiscountPercent(
    _discountPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExtraFunds(
    _daoFund: string,
    _daoFundSharedPercent: BigNumberish,
    _devFund: string,
    _devFundSharedPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJiraOracle(
    _jiraOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJiraPriceCeiling(
    _jiraPriceCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDebtRatioPercent(
    _maxDebtRatioPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDiscountRate(
    _maxDiscountRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxExpansionTiersEntry(
    _index: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPremiumRate(
    _maxPremiumRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSupplyContractionPercent(
    _maxSupplyContractionPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSupplyExpansionPercents(
    _maxSupplyExpansionPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintingFactorForPayingDebt(
    _mintingFactorForPayingDebt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumPercent(
    _premiumPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumThreshold(
    _premiumThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupplyTiersEntry(
    _index: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  supplyTiers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    allocateSeigniorage(overrides?: CallOverrides): Promise<void>;

    bbond(overrides?: CallOverrides): Promise<string>;

    boardroom(overrides?: CallOverrides): Promise<string>;

    boardroomAllocateSeigniorage(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    boardroomGovernanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    boardroomSetLockUp(
      _withdrawLockupEpochs: BigNumberish,
      _rewardLockupEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    boardroomSetOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bondDepletionFloorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrapEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrapSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bshare(overrides?: CallOverrides): Promise<string>;

    buyBonds(
      _jiraAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    daoFund(overrides?: CallOverrides): Promise<string>;

    daoFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

    devFund(overrides?: CallOverrides): Promise<string>;

    devFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

    discountPercent(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochSupplyContractionLeft(overrides?: CallOverrides): Promise<BigNumber>;

    excludedFromTotalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBondDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBondPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBurnableJiraLeft(overrides?: CallOverrides): Promise<BigNumber>;

    getJiraCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getJiraPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getJiraUpdatedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemableBonds(overrides?: CallOverrides): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    governanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _jira: string,
      _bbond: string,
      _bshare: string,
      _jiraOracle: string,
      _boardroom: string,
      _startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    jira(overrides?: CallOverrides): Promise<string>;

    jiraOracle(overrides?: CallOverrides): Promise<string>;

    jiraPriceCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    jiraPriceOne(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtRatioPercent(overrides?: CallOverrides): Promise<BigNumber>;

    maxDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxExpansionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyContractionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    mintingFactorForPayingDebt(overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<string>;

    premiumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    premiumThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    previousEpochJiraPrice(overrides?: CallOverrides): Promise<BigNumber>;

    redeemBonds(
      _bondAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    seigniorageExpansionFloorPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seigniorageSaved(overrides?: CallOverrides): Promise<BigNumber>;

    setBoardroom(_boardroom: string, overrides?: CallOverrides): Promise<void>;

    setBondDepletionFloorPercent(
      _bondDepletionFloorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBootstrap(
      _bootstrapEpochs: BigNumberish,
      _bootstrapSupplyExpansionPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDiscountPercent(
      _discountPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExtraFunds(
      _daoFund: string,
      _daoFundSharedPercent: BigNumberish,
      _devFund: string,
      _devFundSharedPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setJiraOracle(
      _jiraOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setJiraPriceCeiling(
      _jiraPriceCeiling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDebtRatioPercent(
      _maxDebtRatioPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDiscountRate(
      _maxDiscountRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxExpansionTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMaxPremiumRate(
      _maxPremiumRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupplyContractionPercent(
      _maxSupplyContractionPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingFactorForPayingDebt(
      _mintingFactorForPayingDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    setPremiumPercent(
      _premiumPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumThreshold(
      _premiumThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupplyTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    supplyTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BoardroomFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): BoardroomFundedEventFilter;
    BoardroomFunded(
      timestamp?: null,
      seigniorage?: null
    ): BoardroomFundedEventFilter;

    "BoughtBonds(address,uint256,uint256)"(
      from?: string | null,
      jiraAmount?: null,
      bondAmount?: null
    ): BoughtBondsEventFilter;
    BoughtBonds(
      from?: string | null,
      jiraAmount?: null,
      bondAmount?: null
    ): BoughtBondsEventFilter;

    "BurnedBonds(address,uint256)"(
      from?: string | null,
      bondAmount?: null
    ): BurnedBondsEventFilter;
    BurnedBonds(
      from?: string | null,
      bondAmount?: null
    ): BurnedBondsEventFilter;

    "DaoFundFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): DaoFundFundedEventFilter;
    DaoFundFunded(
      timestamp?: null,
      seigniorage?: null
    ): DaoFundFundedEventFilter;

    "DevFundFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): DevFundFundedEventFilter;
    DevFundFunded(
      timestamp?: null,
      seigniorage?: null
    ): DevFundFundedEventFilter;

    "Initialized(address,uint256)"(
      executor?: string | null,
      at?: null
    ): InitializedEventFilter;
    Initialized(executor?: string | null, at?: null): InitializedEventFilter;

    "RedeemedBonds(address,uint256,uint256)"(
      from?: string | null,
      jiraAmount?: null,
      bondAmount?: null
    ): RedeemedBondsEventFilter;
    RedeemedBonds(
      from?: string | null,
      jiraAmount?: null,
      bondAmount?: null
    ): RedeemedBondsEventFilter;

    "TreasuryFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): TreasuryFundedEventFilter;
    TreasuryFunded(
      timestamp?: null,
      seigniorage?: null
    ): TreasuryFundedEventFilter;
  };

  estimateGas: {
    PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    allocateSeigniorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bbond(overrides?: CallOverrides): Promise<BigNumber>;

    boardroom(overrides?: CallOverrides): Promise<BigNumber>;

    boardroomAllocateSeigniorage(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boardroomGovernanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boardroomSetLockUp(
      _withdrawLockupEpochs: BigNumberish,
      _rewardLockupEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boardroomSetOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondDepletionFloorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrapEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrapSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bshare(overrides?: CallOverrides): Promise<BigNumber>;

    buyBonds(
      _jiraAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoFund(overrides?: CallOverrides): Promise<BigNumber>;

    daoFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

    devFund(overrides?: CallOverrides): Promise<BigNumber>;

    devFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

    discountPercent(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochSupplyContractionLeft(overrides?: CallOverrides): Promise<BigNumber>;

    excludedFromTotalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBondPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBurnableJiraLeft(overrides?: CallOverrides): Promise<BigNumber>;

    getJiraCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getJiraPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getJiraUpdatedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemableBonds(overrides?: CallOverrides): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    governanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _jira: string,
      _bbond: string,
      _bshare: string,
      _jiraOracle: string,
      _boardroom: string,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    jira(overrides?: CallOverrides): Promise<BigNumber>;

    jiraOracle(overrides?: CallOverrides): Promise<BigNumber>;

    jiraPriceCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    jiraPriceOne(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtRatioPercent(overrides?: CallOverrides): Promise<BigNumber>;

    maxDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxExpansionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyContractionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    mintingFactorForPayingDebt(overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    premiumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    premiumThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    previousEpochJiraPrice(overrides?: CallOverrides): Promise<BigNumber>;

    redeemBonds(
      _bondAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seigniorageExpansionFloorPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seigniorageSaved(overrides?: CallOverrides): Promise<BigNumber>;

    setBoardroom(
      _boardroom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondDepletionFloorPercent(
      _bondDepletionFloorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBootstrap(
      _bootstrapEpochs: BigNumberish,
      _bootstrapSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDiscountPercent(
      _discountPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExtraFunds(
      _daoFund: string,
      _daoFundSharedPercent: BigNumberish,
      _devFund: string,
      _devFundSharedPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJiraOracle(
      _jiraOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJiraPriceCeiling(
      _jiraPriceCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDebtRatioPercent(
      _maxDebtRatioPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDiscountRate(
      _maxDiscountRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxExpansionTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPremiumRate(
      _maxPremiumRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSupplyContractionPercent(
      _maxSupplyContractionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintingFactorForPayingDebt(
      _mintingFactorForPayingDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumPercent(
      _premiumPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumThreshold(
      _premiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupplyTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    supplyTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocateSeigniorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bbond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boardroom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boardroomAllocateSeigniorage(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boardroomGovernanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boardroomSetLockUp(
      _withdrawLockupEpochs: BigNumberish,
      _rewardLockupEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boardroomSetOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondDepletionFloorPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bootstrapEpochs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bootstrapSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bshare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBonds(
      _jiraAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoFundSharedPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devFundSharedPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    discountPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochSupplyContractionLeft(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excludedFromTotalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondDiscountRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondPremiumRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBurnableJiraLeft(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJiraCirculatingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getJiraPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJiraUpdatedPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedeemableBonds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _jira: string,
      _bbond: string,
      _bshare: string,
      _jiraOracle: string,
      _boardroom: string,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jira(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jiraOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jiraPriceCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jiraPriceOne(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDebtRatioPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDiscountRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxExpansionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPremiumRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupplyContractionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintingFactorForPayingDebt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextEpochPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premiumPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premiumThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousEpochJiraPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemBonds(
      _bondAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seigniorageExpansionFloorPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seigniorageSaved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBoardroom(
      _boardroom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondDepletionFloorPercent(
      _bondDepletionFloorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBootstrap(
      _bootstrapEpochs: BigNumberish,
      _bootstrapSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDiscountPercent(
      _discountPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExtraFunds(
      _daoFund: string,
      _daoFundSharedPercent: BigNumberish,
      _devFund: string,
      _devFundSharedPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJiraOracle(
      _jiraOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJiraPriceCeiling(
      _jiraPriceCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDebtRatioPercent(
      _maxDebtRatioPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDiscountRate(
      _maxDiscountRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxExpansionTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPremiumRate(
      _maxPremiumRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSupplyContractionPercent(
      _maxSupplyContractionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintingFactorForPayingDebt(
      _mintingFactorForPayingDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumPercent(
      _premiumPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumThreshold(
      _premiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupplyTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
