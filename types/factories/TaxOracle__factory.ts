/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TaxOracle, TaxOracleInterface } from "../TaxOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_jira",
        type: "address",
      },
      {
        internalType: "address",
        name: "_btcb",
        type: "address",
      },
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "btcb",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
    ],
    name: "consult",
    outputs: [
      {
        internalType: "uint144",
        name: "amountOut",
        type: "uint144",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBtcbBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getJiraBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "jira",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pair",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_btcb",
        type: "address",
      },
    ],
    name: "setBtcb",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_jira",
        type: "address",
      },
    ],
    name: "setJira",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
    ],
    name: "setPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d95380380610d958339818101604052606081101561003357600080fd5b5080516020820151604090920151909190600061004e6101eb565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0383166100f3576040805162461bcd60e51b815260206004820152601860248201527f6a69726120616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b6001600160a01b03821661014e576040805162461bcd60e51b815260206004820152601860248201527f6274636220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b6001600160a01b0381166101a9576040805162461bcd60e51b815260206004820152601860248201527f7061697220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600180546001600160a01b039485166001600160a01b0319918216179091556002805493851693821693909317909255600380549190931691161790556101ef565b3390565b610b97806101fe6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063a8aa1b3111610066578063a8aa1b31146101f1578063bb1365ca146101f9578063ede138b614610201578063f2fde38b14610209576100cf565b80638da5cb5b146101bd57806394e18f34146101e157806398d5fdca146101e9576100cf565b80633ddac953146100d457806343dbbd3e14610127578063509e32651461014157806353f4527014610169578063715018a61461018f5780638187f51614610197575b600080fd5b610100600480360360408110156100ea57600080fd5b506001600160a01b03813516906020013561022f565b6040805171ffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61012f6103b0565b60408051918252519081900360200190f35b6101676004803603602081101561015757600080fd5b50356001600160a01b0316610435565b005b6101676004803603602081101561017f57600080fd5b50356001600160a01b0316610514565b6101676105f3565b610167600480360360208110156101ad57600080fd5b50356001600160a01b031661069f565b6101c561077e565b604080516001600160a01b039092168252519081900360200190f35b61012f61078d565b61012f6107e1565b6101c5610900565b6101c561090f565b6101c561091e565b6101676004803603602081101561021f57600080fd5b50356001600160a01b031661092d565b6001546000906001600160a01b0384811691161461028d576040805162461bcd60e51b8152602060048201526016602482015275746f6b656e206e6565647320746f206265206a69726160501b604482015290519081900360640190fd5b600154600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d602081101561030b57600080fd5b5051600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b15801561036357600080fd5b505afa158015610377573d6000803e3d6000fd5b505050506040513d602081101561038d57600080fd5b505190506103a58161039f8487610a2f565b90610a8f565b925050505b92915050565b600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561040457600080fd5b505afa158015610418573d6000803e3d6000fd5b505050506040513d602081101561042e57600080fd5b5051905090565b61043d610af6565b6001600160a01b031661044e61077e565b6001600160a01b031614610497576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b0381166104f2576040805162461bcd60e51b815260206004820152601860248201527f6a69726120616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61051c610af6565b6001600160a01b031661052d61077e565b6001600160a01b031614610576576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b0381166105d1576040805162461bcd60e51b815260206004820152601860248201527f6274636220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6105fb610af6565b6001600160a01b031661060c61077e565b6001600160a01b031614610655576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6106a7610af6565b6001600160a01b03166106b861077e565b6001600160a01b031614610701576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b03811661075c576040805162461bcd60e51b815260206004820152601860248201527f7061697220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b600154600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561040457600080fd5b600154600354604080516370a0823160e01b81526001600160a01b0392831660048201529051600093849316916370a08231916024808301926020929190829003018186803b15801561083357600080fd5b505afa158015610847573d6000803e3d6000fd5b505050506040513d602081101561085d57600080fd5b5051600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506040513d60208110156108df57600080fd5b505190506108f98161039f84670de0b6b3a7640000610a2f565b9250505090565b6003546001600160a01b031681565b6002546001600160a01b031681565b6001546001600160a01b031681565b610935610af6565b6001600160a01b031661094661077e565b6001600160a01b03161461098f576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b0381166109d45760405162461bcd60e51b8152600401808060200182810382526026815260200180610afb6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082610a3e575060006103aa565b82820282848281610a4b57fe5b0414610a885760405162461bcd60e51b8152600401808060200182810382526021815260200180610b216021913960400191505060405180910390fd5b9392505050565b6000808211610ae5576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610aee57fe5b049392505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122076a45fabfaf88a9fbe158fe52a384ede1d1b9658ad6c6974523eaf62e999267c64736f6c634300060c0033";

type TaxOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TaxOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TaxOracle__factory extends ContractFactory {
  constructor(...args: TaxOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _jira: string,
    _btcb: string,
    _pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TaxOracle> {
    return super.deploy(
      _jira,
      _btcb,
      _pair,
      overrides || {}
    ) as Promise<TaxOracle>;
  }
  getDeployTransaction(
    _jira: string,
    _btcb: string,
    _pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_jira, _btcb, _pair, overrides || {});
  }
  attach(address: string): TaxOracle {
    return super.attach(address) as TaxOracle;
  }
  connect(signer: Signer): TaxOracle__factory {
    return super.connect(signer) as TaxOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TaxOracleInterface {
    return new utils.Interface(_abi) as TaxOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TaxOracle {
    return new Contract(address, _abi, signerOrProvider) as TaxOracle;
  }
}
