{
  "address": "0x34671be4688a548b9653D209180f4eE473A31bc2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "allocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boardroomHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "canClaimReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "canWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getJiraPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getLastSnapshotIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_jira",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_share",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jira",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestSnapshotIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastSnapshotIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardEarned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochTimerStart",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardLockupEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawLockupEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardLockupEpochs",
          "type": "uint256"
        }
      ],
      "name": "setLockUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "share",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLockupEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1109621508907979c2e9ece116736cbabac730d171d4bea0e39c3280e8e9a55f",
  "receipt": {
    "to": null,
    "from": "0x8F66b7C05B7010DCFf9Fc930ea44df397b7f3e08",
    "contractAddress": "0x34671be4688a548b9653D209180f4eE473A31bc2",
    "transactionIndex": 6,
    "gasUsed": "1809297",
    "logsBloom": "0x
    "blockHash": "0xc3e9f73b74b7a910622af9cf74b5c6989d81542bd2a4ccb5b319c733e8b1319a",
    "transactionHash": "0x1109621508907979c2e9ece116736cbabac730d171d4bea0e39c3280e8e9a55f",
    "logs": [],
    "blockNumber": 15376256,
    "cumulativeGasUsed": "2315405",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "09272786aa9b7d4ba6555ce839a0b675",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boardroomHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"canClaimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJiraPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getLastSnapshotIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_jira\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jira\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestSnapshotIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastSnapshotIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochTimerStart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLockupEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLockupEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockupEpochs\",\"type\":\"uint256\"}],\"name\":\"setLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLockupEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Boardroom.sol\":\"Boardroom\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/Boardroom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./utils/ContractGuard.sol\\\";\\nimport \\\"./interfaces/IBasisAsset.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\n\\ncontract ShareWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public share;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        share.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual {\\n        uint256 memberShare = _balances[msg.sender];\\n        require(memberShare >= amount, \\\"Boardroom: withdraw request greater than staked amount\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = memberShare.sub(amount);\\n        share.safeTransfer(msg.sender, amount);\\n    }\\n}\\n\\n/*\\n\\n$$$$$$$\\\\   $$$$$$\\\\  $$\\\\      $$\\\\ $$$$$$$\\\\                                                            \\n$$  __$$\\\\ $$  __$$\\\\ $$$\\\\    $$$ |$$  __$$\\\\                                                           \\n$$ |  $$ |$$ /  $$ |$$$$\\\\  $$$$ |$$ |  $$ |    $$$$$$\\\\$$$$\\\\   $$$$$$\\\\  $$$$$$$\\\\   $$$$$$\\\\  $$\\\\   $$\\\\ \\n$$$$$$$\\\\ |$$ |  $$ |$$\\\\$$\\\\$$ $$ |$$$$$$$\\\\ |    $$  _$$  _$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$ |  $$ |\\n$$  __$$\\\\ $$ |  $$ |$$ \\\\$$$  $$ |$$  __$$\\\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\\n$$ |  $$ |$$ |  $$ |$$ |\\\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\\n$$$$$$$  | $$$$$$  |$$ | \\\\_/ $$ |$$$$$$$  |$$\\\\ $$ | $$ | $$ |\\\\$$$$$$  |$$ |  $$ |\\\\$$$$$$$\\\\ \\\\$$$$$$$ |\\n\\\\_______/  \\\\______/ \\\\__|     \\\\__|\\\\_______/ \\\\__|\\\\__| \\\\__| \\\\__| \\\\______/ \\\\__|  \\\\__| \\\\_______| \\\\____$$ |\\n                                                                                           $$\\\\   $$ |\\n                                                                                           \\\\$$$$$$  |\\n    http://jira.money                                                                      \\\\______/ \\n*/\\ncontract Boardroom is ShareWrapper, ContractGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Memberseat {\\n        uint256 lastSnapshotIndex;\\n        uint256 rewardEarned;\\n        uint256 epochTimerStart;\\n    }\\n\\n    struct BoardroomSnapshot {\\n        uint256 time;\\n        uint256 rewardReceived;\\n        uint256 rewardPerShare;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    IERC20 public jira;\\n    ITreasury public treasury;\\n\\n    mapping(address => Memberseat) public members;\\n    BoardroomSnapshot[] public boardroomHistory;\\n\\n    uint256 public withdrawLockupEpochs;\\n    uint256 public rewardLockupEpochs;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardAdded(address indexed user, uint256 reward);\\n\\n    /* ========== Modifiers =============== */\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"Boardroom: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier memberExists() {\\n        require(balanceOf(msg.sender) > 0, \\\"Boardroom: The member does not exist\\\");\\n        _;\\n    }\\n\\n    modifier updateReward(address member) {\\n        if (member != address(0)) {\\n            Memberseat memory seat = members[member];\\n            seat.rewardEarned = earned(member);\\n            seat.lastSnapshotIndex = latestSnapshotIndex();\\n            members[member] = seat;\\n        }\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"Boardroom: already initialized\\\");\\n        _;\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        IERC20 _jira,\\n        IERC20 _share,\\n        ITreasury _treasury\\n    ) public notInitialized {\\n        jira = _jira;\\n        share = _share;\\n        treasury = _treasury;\\n\\n        BoardroomSnapshot memory genesisSnapshot = BoardroomSnapshot({time: block.number, rewardReceived: 0, rewardPerShare: 0});\\n        boardroomHistory.push(genesisSnapshot);\\n\\n        withdrawLockupEpochs = 6; // Lock for 6 epochs (36h) before release withdraw\\n        rewardLockupEpochs = 3; // Lock for 3 epochs (18h) before release claimReward\\n\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\\n        require(_withdrawLockupEpochs >= _rewardLockupEpochs && _withdrawLockupEpochs <= 56, \\\"_withdrawLockupEpochs: out of range\\\"); // <= 2 week\\n        withdrawLockupEpochs = _withdrawLockupEpochs;\\n        rewardLockupEpochs = _rewardLockupEpochs;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    // =========== Snapshot getters\\n\\n    function latestSnapshotIndex() public view returns (uint256) {\\n        return boardroomHistory.length.sub(1);\\n    }\\n\\n    function getLatestSnapshot() internal view returns (BoardroomSnapshot memory) {\\n        return boardroomHistory[latestSnapshotIndex()];\\n    }\\n\\n    function getLastSnapshotIndexOf(address member) public view returns (uint256) {\\n        return members[member].lastSnapshotIndex;\\n    }\\n\\n    function getLastSnapshotOf(address member) internal view returns (BoardroomSnapshot memory) {\\n        return boardroomHistory[getLastSnapshotIndexOf(member)];\\n    }\\n\\n    function canWithdraw(address member) external view returns (bool) {\\n        return members[member].epochTimerStart.add(withdrawLockupEpochs) <= treasury.epoch();\\n    }\\n\\n    function canClaimReward(address member) external view returns (bool) {\\n        return members[member].epochTimerStart.add(rewardLockupEpochs) <= treasury.epoch();\\n    }\\n\\n    function epoch() external view returns (uint256) {\\n        return treasury.epoch();\\n    }\\n\\n    function nextEpochPoint() external view returns (uint256) {\\n        return treasury.nextEpochPoint();\\n    }\\n\\n    function getJiraPrice() external view returns (uint256) {\\n        return treasury.getJiraPrice();\\n    }\\n\\n    // =========== Member getters\\n\\n    function rewardPerShare() public view returns (uint256) {\\n        return getLatestSnapshot().rewardPerShare;\\n    }\\n\\n    function earned(address member) public view returns (uint256) {\\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 storedRPS = getLastSnapshotOf(member).rewardPerShare;\\n\\n        return balanceOf(member).mul(latestRPS.sub(storedRPS)).div(1e18).add(members[member].rewardEarned);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount) public override onlyOneBlock updateReward(msg.sender) {\\n        require(amount > 0, \\\"Boardroom: Cannot stake 0\\\");\\n        super.stake(amount);\\n        members[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public override onlyOneBlock memberExists updateReward(msg.sender) {\\n        require(amount > 0, \\\"Boardroom: Cannot withdraw 0\\\");\\n        require(members[msg.sender].epochTimerStart.add(withdrawLockupEpochs) <= treasury.epoch(), \\\"Boardroom: still in withdraw lockup\\\");\\n        claimReward();\\n        super.withdraw(amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n    }\\n\\n    function claimReward() public updateReward(msg.sender) {\\n        uint256 reward = members[msg.sender].rewardEarned;\\n        if (reward > 0) {\\n            require(members[msg.sender].epochTimerStart.add(rewardLockupEpochs) <= treasury.epoch(), \\\"Boardroom: still in reward lockup\\\");\\n            members[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\\n            members[msg.sender].rewardEarned = 0;\\n            jira.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function allocateSeigniorage(uint256 amount) external onlyOneBlock onlyOperator {\\n        require(amount > 0, \\\"Boardroom: Cannot allocate 0\\\");\\n        require(totalSupply() > 0, \\\"Boardroom: Cannot allocate when totalSupply is 0\\\");\\n\\n        // Create & add new snapshot\\n        uint256 prevRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(totalSupply()));\\n\\n        BoardroomSnapshot memory newSnapshot = BoardroomSnapshot({time: block.number, rewardReceived: amount, rewardPerShare: nextRPS});\\n        boardroomHistory.push(newSnapshot);\\n\\n        jira.safeTransferFrom(msg.sender, address(this), amount);\\n        emit RewardAdded(msg.sender, amount);\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(jira), \\\"jira\\\");\\n        require(address(_token) != address(share), \\\"share\\\");\\n        _token.safeTransfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe076b02fce2eb0c3cc06cf249e3f525876316898f537f774258ba8567ba44e9d\",\"license\":\"MIT\"},\"contracts/interfaces/IBasisAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IBasisAsset {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n}\\n\",\"keccak256\":\"0xd7a0645a5d2c8a0204f2c536388b034e9fa3b725283c36ebc38c0282627ae4ba\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITreasury {\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getJiraPrice() external view returns (uint256);\\n\\n    function buyBonds(uint256 amount, uint256 targetPrice) external;\\n\\n    function redeemBonds(uint256 amount, uint256 targetPrice) external;\\n}\\n\",\"keccak256\":\"0x90b3329aa3302f4ca5179dc0d59e1c336b5a9520930aa2da1b6f9298cf42a572\",\"license\":\"MIT\"},\"contracts/utils/ContractGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x8e558ef5a039ce6ecd27eef794d31a136fd7b0e8c473bd86daa5baf7e8cf7a26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526004805460ff60a01b1916905534801561001d57600080fd5b50611fba8061002d6000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c806361d027b311610104578063b06d1573116100a2578063c58e384311610071578063c58e384314610487578063c5967c26146104a4578063e9fad8ee146104ac578063ede138b6146104b4576101ce565b8063b06d157314610419578063b3ab15fb14610421578063b88a802f14610447578063c0c53b8b1461044f576101ce565b8063900cf0cf116100de578063900cf0cf146103cf57806397ffe1d7146103d7578063a694fc3a146103f4578063a8d5fd6514610411576101ce565b806361d027b31461037b57806370a0823114610383578063714b4658146103a9576101ce565b80631e85cd65116101715780633f9e3f041161014b5780633f9e3f0414610311578063446a2ec81461031957806354575af414610321578063570ca73514610357576101ce565b80631e85cd65146102c75780632e1a7d4d146102cf5780632ffaaa09146102ee576101ce565b806308ae4b0c116101ad57806308ae4b0c1461024d578063158ef93e1461029157806318160ddd1461029957806319262d30146102a1576101ce565b80628cc262146101d3578063022ba18d1461020b578063046335d014610213575b600080fd5b6101f9600480360360208110156101e957600080fd5b50356001600160a01b03166104bc565b60408051918252519081900360200190f35b6101f961053d565b6102396004803603602081101561022957600080fd5b50356001600160a01b0316610543565b604080519115158252519081900360200190f35b6102736004803603602081101561026357600080fd5b50356001600160a01b03166105e4565b60408051938452602084019290925282820152519081900360600190f35b610239610605565b6101f9610615565b610239600480360360208110156102b757600080fd5b50356001600160a01b031661061b565b6101f96106b4565b6102ec600480360360208110156102e557600080fd5b50356106ba565b005b6102ec6004803603604081101561030457600080fd5b50803590602001356109d4565b6101f9610a74565b6101f9610a8a565b6102ec6004803603606081101561033757600080fd5b506001600160a01b03813581169160208101359160409091013516610a9d565b61035f610b96565b604080516001600160a01b039092168252519081900360200190f35b61035f610ba5565b6101f96004803603602081101561039957600080fd5b50356001600160a01b0316610bb4565b6101f9600480360360208110156103bf57600080fd5b50356001600160a01b0316610bcf565b6101f9610bea565b6102ec600480360360208110156103ed57600080fd5b5035610c60565b6102ec6004803603602081101561040a57600080fd5b5035610f44565b61035f6111c9565b6101f96111d8565b6102ec6004803603602081101561043757600080fd5b50356001600160a01b031661121d565b6102ec611288565b6102ec6004803603606081101561046557600080fd5b506001600160a01b0381358116916020810135821691604090910135166114ff565b6102736004803603602081101561049d57600080fd5b50356116b1565b6101f96116e1565b6102ec611726565b61035f611739565b6000806104c7611748565b60400151905060006104d8846117a0565b6040908101516001600160a01b0386166000908152600760205291909120600101549091506105359061052f670de0b6b3a764000061052961051a87876117fb565b6105238a610bb4565b9061185d565b906118bd565b90611924565b949350505050565b600a5481565b6006546040805163900cf0cf60e01b815290516000926001600160a01b03169163900cf0cf916004808301926020929190829003018186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d60208110156105b257600080fd5b5051600a546001600160a01b0384166000908152600760205260409020600201546105dc91611924565b111592915050565b60076020526000908152604090208054600182015460029092015490919083565b600454600160a01b900460ff1681565b60015490565b6006546040805163900cf0cf60e01b815290516000926001600160a01b03169163900cf0cf916004808301926020929190829003018186803b15801561066057600080fd5b505afa158015610674573d6000803e3d6000fd5b505050506040513d602081101561068a57600080fd5b50516009546001600160a01b0384166000908152600760205260409020600201546105dc91611924565b60095481565b6106c261197e565b156106fe5760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b61070661199f565b156107425760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b600061074d33610bb4565b116107895760405162461bcd60e51b8152600401808060200182810382526024815260200180611dfe6024913960400191505060405180910390fd5b33801561082357610798611ddc565b506001600160a01b03811660009081526007602090815260409182902082516060810184528154815260018201549281019290925260020154918101919091526107e1826104bc565b60208201526107ee610a74565b81526001600160a01b038216600090815260076020908152604091829020835181559083015160018201559101516002909101555b60008211610878576040805162461bcd60e51b815260206004820152601c60248201527f426f617264726f6f6d3a2043616e6e6f74207769746864726177203000000000604482015290519081900360640190fd5b600660009054906101000a90046001600160a01b03166001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d60208110156108f057600080fd5b50516009543360009081526007602052604090206002015461091191611924565b111561094e5760405162461bcd60e51b8152600401808060200182810382526023815260200180611edc6023913960400191505060405180910390fd5b610956611288565b61095f826119c0565b60408051838152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a250504360009081526003602090815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b6004546001600160a01b03163314610a1d5760405162461bcd60e51b8152600401808060200182810382526025815260200180611eb76025913960400191505060405180910390fd5b808210158015610a2e575060388211155b610a695760405162461bcd60e51b8152600401808060200182810382526023815260200180611e946023913960400191505060405180910390fd5b600991909155600a55565b600854600090610a859060016117fb565b905090565b6000610a94611748565b60400151905090565b6004546001600160a01b03163314610ae65760405162461bcd60e51b8152600401808060200182810382526025815260200180611eb76025913960400191505060405180910390fd5b6005546001600160a01b0384811691161415610b32576040805162461bcd60e51b815260206004808301919091526024820152636a69726160e01b604482015290519081900360640190fd5b6000546001600160a01b0384811691161415610b7d576040805162461bcd60e51b8152602060048201526005602482015264736861726560d81b604482015290519081900360640190fd5b610b916001600160a01b0384168284611a50565b505050565b6004546001600160a01b031681565b6006546001600160a01b031681565b6001600160a01b031660009081526002602052604090205490565b6001600160a01b031660009081526007602052604090205490565b6006546040805163900cf0cf60e01b815290516000926001600160a01b03169163900cf0cf916004808301926020929190829003018186803b158015610c2f57600080fd5b505afa158015610c43573d6000803e3d6000fd5b505050506040513d6020811015610c5957600080fd5b5051905090565b610c6861197e565b15610ca45760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b610cac61199f565b15610ce85760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b6004546001600160a01b03163314610d315760405162461bcd60e51b8152600401808060200182810382526025815260200180611eb76025913960400191505060405180910390fd5b60008111610d86576040805162461bcd60e51b815260206004820152601c60248201527f426f617264726f6f6d3a2043616e6e6f7420616c6c6f63617465203000000000604482015290519081900360640190fd5b6000610d90610615565b11610dcc5760405162461bcd60e51b8152600401808060200182810382526030815260200180611e226030913960400191505060405180910390fd5b6000610dd6611748565b6040015190506000610e05610dfe610dec610615565b61052986670de0b6b3a764000061185d565b8390611924565b9050610e0f611ddc565b5060408051606081018252438152602081018581529181018381526008805460018101825560009190915282517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360039092029182015592517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4840155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee590920191909155600554610ecd906001600160a01b0316333087611aa2565b60408051858152905133917fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29919081900360200190a250504360009081526003602090815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050565b610f4c61197e565b15610f885760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b610f9061199f565b15610fcc5760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b33801561106657610fdb611ddc565b506001600160a01b0381166000908152600760209081526040918290208251606081018452815481526001820154928101929092526002015491810191909152611024826104bc565b6020820152611031610a74565b81526001600160a01b038216600090815260076020908152604091829020835181559083015160018201559101516002909101555b600082116110bb576040805162461bcd60e51b815260206004820152601960248201527f426f617264726f6f6d3a2043616e6e6f74207374616b65203000000000000000604482015290519081900360640190fd5b6110c482611b02565b600660009054906101000a90046001600160a01b03166001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111257600080fd5b505afa158015611126573d6000803e3d6000fd5b505050506040513d602081101561113c57600080fd5b505133600081815260076020908152604091829020600201939093558051858152905191927f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92918290030190a250504360009081526003602090815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b6000546001600160a01b031681565b6006546040805163b06d157360e01b815290516000926001600160a01b03169163b06d1573916004808301926020929190829003018186803b158015610c2f57600080fd5b6004546001600160a01b031633146112665760405162461bcd60e51b8152600401808060200182810382526025815260200180611eb76025913960400191505060405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b33801561132257611297611ddc565b506001600160a01b03811660009081526007602090815260409182902082516060810184528154815260018201549281019290925260020154918101919091526112e0826104bc565b60208201526112ed610a74565b81526001600160a01b038216600090815260076020908152604091829020835181559083015160018201559101516002909101555b3360009081526007602052604090206001015480156114fb57600660009054906101000a90046001600160a01b03166001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138957600080fd5b505afa15801561139d573d6000803e3d6000fd5b505050506040513d60208110156113b357600080fd5b5051600a54336000908152600760205260409020600201546113d491611924565b11156114115760405162461bcd60e51b8152600401808060200182810382526021815260200180611e736021913960400191505060405180910390fd5b600660009054906101000a90046001600160a01b03166001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561145f57600080fd5b505afa158015611473573d6000803e3d6000fd5b505050506040513d602081101561148957600080fd5b505133600081815260076020526040812060028101939093556001909201919091556005546114c4916001600160a01b039091169083611a50565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b5050565b600454600160a01b900460ff161561155e576040805162461bcd60e51b815260206004820152601e60248201527f426f617264726f6f6d3a20616c726561647920696e697469616c697a65640000604482015290519081900360640190fd5b600580546001600160a01b038086166001600160a01b0319928316179092556000805485841690831617905560068054928416929091169190911790556115a3611ddc565b50604080516060810182524380825260006020808401828152848601838152600880546001810182559452855160039485027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee381019190915591517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4830155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee5909101556006600955600a91909155600480546001600160a01b031960ff60a01b19909116600160a01b171633908117909155845192835293519293927f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799281900390910190a250505050565b600881815481106116be57fe5b600091825260209091206003909102018054600182015460029092015490925083565b600654604080516362cb3e1360e11b815290516000926001600160a01b03169163c5967c26916004808301926020929190829003018186803b158015610c2f57600080fd5b61173761173233610bb4565b6106ba565b565b6005546001600160a01b031681565b611750611ddc565b600861175a610a74565b8154811061176457fe5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b6117a8611ddc565b60086117b383610bcf565b815481106117bd57fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b600082821115611852576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b60008261186c57506000611857565b8282028284828161187957fe5b04146118b65760405162461bcd60e51b8152600401808060200182810382526021815260200180611e526021913960400191505060405180910390fd5b9392505050565b6000808211611913576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161191c57fe5b049392505050565b6000828201838110156118b6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b43600090815260036020908152604080832032845290915290205460ff1690565b43600090815260036020908152604080832033845290915290205460ff1690565b3360009081526002602052604090205481811015611a0f5760405162461bcd60e51b8152600401808060200182810382526036815260200180611f4f6036913960400191505060405180910390fd5b600154611a1c90836117fb565b600155611a2981836117fb565b3360008181526002602052604081209290925590546114fb916001600160a01b0390911690845b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b91908490611b5b565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611afc908590611b5b565b50505050565b600154611b0f9082611924565b60015533600090815260026020526040902054611b2c9082611924565b336000818152600260205260408120929092559054611b58916001600160a01b03909116903084611aa2565b50565b6060611bb0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c0c9092919063ffffffff16565b805190915015610b9157808060200190516020811015611bcf57600080fd5b5051610b915760405162461bcd60e51b815260040180806020018281038252602a815260200180611eff602a913960400191505060405180910390fd5b6060610535848460008585611c2085611d32565b611c71576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611cb05780518252601f199092019160209182019101611c91565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611d12576040519150601f19603f3d011682016040523d82523d6000602084013e611d17565b606091505b5091509150611d27828286611d38565b979650505050505050565b3b151590565b60608315611d475750816118b6565b825115611d575782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611da1578181015183820152602001611d89565b50505050905090810190601f168015611dce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060600160405280600081526020016000815260200160008152509056fe426f617264726f6f6d3a20546865206d656d62657220646f6573206e6f74206578697374426f617264726f6f6d3a2043616e6e6f7420616c6c6f63617465207768656e20746f74616c537570706c792069732030536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77426f617264726f6f6d3a207374696c6c20696e20726577617264206c6f636b75705f77697468647261774c6f636b757045706f6368733a206f7574206f662072616e6765426f617264726f6f6d3a2063616c6c6572206973206e6f7420746865206f70657261746f72426f617264726f6f6d3a207374696c6c20696e207769746864726177206c6f636b75705361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e426f617264726f6f6d3a20776974686472617720726571756573742067726561746572207468616e207374616b656420616d6f756e74a26469706673582212207de411a2c72cd6be41f5e4a32820b0da180803702594a3fa6fd62e554e1a5f2964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ce5760003560e01c806361d027b311610104578063b06d1573116100a2578063c58e384311610071578063c58e384314610487578063c5967c26146104a4578063e9fad8ee146104ac578063ede138b6146104b4576101ce565b8063b06d157314610419578063b3ab15fb14610421578063b88a802f14610447578063c0c53b8b1461044f576101ce565b8063900cf0cf116100de578063900cf0cf146103cf57806397ffe1d7146103d7578063a694fc3a146103f4578063a8d5fd6514610411576101ce565b806361d027b31461037b57806370a0823114610383578063714b4658146103a9576101ce565b80631e85cd65116101715780633f9e3f041161014b5780633f9e3f0414610311578063446a2ec81461031957806354575af414610321578063570ca73514610357576101ce565b80631e85cd65146102c75780632e1a7d4d146102cf5780632ffaaa09146102ee576101ce565b806308ae4b0c116101ad57806308ae4b0c1461024d578063158ef93e1461029157806318160ddd1461029957806319262d30146102a1576101ce565b80628cc262146101d3578063022ba18d1461020b578063046335d014610213575b600080fd5b6101f9600480360360208110156101e957600080fd5b50356001600160a01b03166104bc565b60408051918252519081900360200190f35b6101f961053d565b6102396004803603602081101561022957600080fd5b50356001600160a01b0316610543565b604080519115158252519081900360200190f35b6102736004803603602081101561026357600080fd5b50356001600160a01b03166105e4565b60408051938452602084019290925282820152519081900360600190f35b610239610605565b6101f9610615565b610239600480360360208110156102b757600080fd5b50356001600160a01b031661061b565b6101f96106b4565b6102ec600480360360208110156102e557600080fd5b50356106ba565b005b6102ec6004803603604081101561030457600080fd5b50803590602001356109d4565b6101f9610a74565b6101f9610a8a565b6102ec6004803603606081101561033757600080fd5b506001600160a01b03813581169160208101359160409091013516610a9d565b61035f610b96565b604080516001600160a01b039092168252519081900360200190f35b61035f610ba5565b6101f96004803603602081101561039957600080fd5b50356001600160a01b0316610bb4565b6101f9600480360360208110156103bf57600080fd5b50356001600160a01b0316610bcf565b6101f9610bea565b6102ec600480360360208110156103ed57600080fd5b5035610c60565b6102ec6004803603602081101561040a57600080fd5b5035610f44565b61035f6111c9565b6101f96111d8565b6102ec6004803603602081101561043757600080fd5b50356001600160a01b031661121d565b6102ec611288565b6102ec6004803603606081101561046557600080fd5b506001600160a01b0381358116916020810135821691604090910135166114ff565b6102736004803603602081101561049d57600080fd5b50356116b1565b6101f96116e1565b6102ec611726565b61035f611739565b6000806104c7611748565b60400151905060006104d8846117a0565b6040908101516001600160a01b0386166000908152600760205291909120600101549091506105359061052f670de0b6b3a764000061052961051a87876117fb565b6105238a610bb4565b9061185d565b906118bd565b90611924565b949350505050565b600a5481565b6006546040805163900cf0cf60e01b815290516000926001600160a01b03169163900cf0cf916004808301926020929190829003018186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d60208110156105b257600080fd5b5051600a546001600160a01b0384166000908152600760205260409020600201546105dc91611924565b111592915050565b60076020526000908152604090208054600182015460029092015490919083565b600454600160a01b900460ff1681565b60015490565b6006546040805163900cf0cf60e01b815290516000926001600160a01b03169163900cf0cf916004808301926020929190829003018186803b15801561066057600080fd5b505afa158015610674573d6000803e3d6000fd5b505050506040513d602081101561068a57600080fd5b50516009546001600160a01b0384166000908152600760205260409020600201546105dc91611924565b60095481565b6106c261197e565b156106fe5760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b61070661199f565b156107425760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b600061074d33610bb4565b116107895760405162461bcd60e51b8152600401808060200182810382526024815260200180611dfe6024913960400191505060405180910390fd5b33801561082357610798611ddc565b506001600160a01b03811660009081526007602090815260409182902082516060810184528154815260018201549281019290925260020154918101919091526107e1826104bc565b60208201526107ee610a74565b81526001600160a01b038216600090815260076020908152604091829020835181559083015160018201559101516002909101555b60008211610878576040805162461bcd60e51b815260206004820152601c60248201527f426f617264726f6f6d3a2043616e6e6f74207769746864726177203000000000604482015290519081900360640190fd5b600660009054906101000a90046001600160a01b03166001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d60208110156108f057600080fd5b50516009543360009081526007602052604090206002015461091191611924565b111561094e5760405162461bcd60e51b8152600401808060200182810382526023815260200180611edc6023913960400191505060405180910390fd5b610956611288565b61095f826119c0565b60408051838152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a250504360009081526003602090815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b6004546001600160a01b03163314610a1d5760405162461bcd60e51b8152600401808060200182810382526025815260200180611eb76025913960400191505060405180910390fd5b808210158015610a2e575060388211155b610a695760405162461bcd60e51b8152600401808060200182810382526023815260200180611e946023913960400191505060405180910390fd5b600991909155600a55565b600854600090610a859060016117fb565b905090565b6000610a94611748565b60400151905090565b6004546001600160a01b03163314610ae65760405162461bcd60e51b8152600401808060200182810382526025815260200180611eb76025913960400191505060405180910390fd5b6005546001600160a01b0384811691161415610b32576040805162461bcd60e51b815260206004808301919091526024820152636a69726160e01b604482015290519081900360640190fd5b6000546001600160a01b0384811691161415610b7d576040805162461bcd60e51b8152602060048201526005602482015264736861726560d81b604482015290519081900360640190fd5b610b916001600160a01b0384168284611a50565b505050565b6004546001600160a01b031681565b6006546001600160a01b031681565b6001600160a01b031660009081526002602052604090205490565b6001600160a01b031660009081526007602052604090205490565b6006546040805163900cf0cf60e01b815290516000926001600160a01b03169163900cf0cf916004808301926020929190829003018186803b158015610c2f57600080fd5b505afa158015610c43573d6000803e3d6000fd5b505050506040513d6020811015610c5957600080fd5b5051905090565b610c6861197e565b15610ca45760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b610cac61199f565b15610ce85760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b6004546001600160a01b03163314610d315760405162461bcd60e51b8152600401808060200182810382526025815260200180611eb76025913960400191505060405180910390fd5b60008111610d86576040805162461bcd60e51b815260206004820152601c60248201527f426f617264726f6f6d3a2043616e6e6f7420616c6c6f63617465203000000000604482015290519081900360640190fd5b6000610d90610615565b11610dcc5760405162461bcd60e51b8152600401808060200182810382526030815260200180611e226030913960400191505060405180910390fd5b6000610dd6611748565b6040015190506000610e05610dfe610dec610615565b61052986670de0b6b3a764000061185d565b8390611924565b9050610e0f611ddc565b5060408051606081018252438152602081018581529181018381526008805460018101825560009190915282517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360039092029182015592517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4840155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee590920191909155600554610ecd906001600160a01b0316333087611aa2565b60408051858152905133917fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29919081900360200190a250504360009081526003602090815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050565b610f4c61197e565b15610f885760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b610f9061199f565b15610fcc5760405162461bcd60e51b8152600401808060200182810382526026815260200180611f296026913960400191505060405180910390fd5b33801561106657610fdb611ddc565b506001600160a01b0381166000908152600760209081526040918290208251606081018452815481526001820154928101929092526002015491810191909152611024826104bc565b6020820152611031610a74565b81526001600160a01b038216600090815260076020908152604091829020835181559083015160018201559101516002909101555b600082116110bb576040805162461bcd60e51b815260206004820152601960248201527f426f617264726f6f6d3a2043616e6e6f74207374616b65203000000000000000604482015290519081900360640190fd5b6110c482611b02565b600660009054906101000a90046001600160a01b03166001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111257600080fd5b505afa158015611126573d6000803e3d6000fd5b505050506040513d602081101561113c57600080fd5b505133600081815260076020908152604091829020600201939093558051858152905191927f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92918290030190a250504360009081526003602090815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b6000546001600160a01b031681565b6006546040805163b06d157360e01b815290516000926001600160a01b03169163b06d1573916004808301926020929190829003018186803b158015610c2f57600080fd5b6004546001600160a01b031633146112665760405162461bcd60e51b8152600401808060200182810382526025815260200180611eb76025913960400191505060405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b33801561132257611297611ddc565b506001600160a01b03811660009081526007602090815260409182902082516060810184528154815260018201549281019290925260020154918101919091526112e0826104bc565b60208201526112ed610a74565b81526001600160a01b038216600090815260076020908152604091829020835181559083015160018201559101516002909101555b3360009081526007602052604090206001015480156114fb57600660009054906101000a90046001600160a01b03166001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138957600080fd5b505afa15801561139d573d6000803e3d6000fd5b505050506040513d60208110156113b357600080fd5b5051600a54336000908152600760205260409020600201546113d491611924565b11156114115760405162461bcd60e51b8152600401808060200182810382526021815260200180611e736021913960400191505060405180910390fd5b600660009054906101000a90046001600160a01b03166001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561145f57600080fd5b505afa158015611473573d6000803e3d6000fd5b505050506040513d602081101561148957600080fd5b505133600081815260076020526040812060028101939093556001909201919091556005546114c4916001600160a01b039091169083611a50565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b5050565b600454600160a01b900460ff161561155e576040805162461bcd60e51b815260206004820152601e60248201527f426f617264726f6f6d3a20616c726561647920696e697469616c697a65640000604482015290519081900360640190fd5b600580546001600160a01b038086166001600160a01b0319928316179092556000805485841690831617905560068054928416929091169190911790556115a3611ddc565b50604080516060810182524380825260006020808401828152848601838152600880546001810182559452855160039485027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee381019190915591517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4830155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee5909101556006600955600a91909155600480546001600160a01b031960ff60a01b19909116600160a01b171633908117909155845192835293519293927f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799281900390910190a250505050565b600881815481106116be57fe5b600091825260209091206003909102018054600182015460029092015490925083565b600654604080516362cb3e1360e11b815290516000926001600160a01b03169163c5967c26916004808301926020929190829003018186803b158015610c2f57600080fd5b61173761173233610bb4565b6106ba565b565b6005546001600160a01b031681565b611750611ddc565b600861175a610a74565b8154811061176457fe5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b6117a8611ddc565b60086117b383610bcf565b815481106117bd57fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b600082821115611852576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b60008261186c57506000611857565b8282028284828161187957fe5b04146118b65760405162461bcd60e51b8152600401808060200182810382526021815260200180611e526021913960400191505060405180910390fd5b9392505050565b6000808211611913576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161191c57fe5b049392505050565b6000828201838110156118b6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b43600090815260036020908152604080832032845290915290205460ff1690565b43600090815260036020908152604080832033845290915290205460ff1690565b3360009081526002602052604090205481811015611a0f5760405162461bcd60e51b8152600401808060200182810382526036815260200180611f4f6036913960400191505060405180910390fd5b600154611a1c90836117fb565b600155611a2981836117fb565b3360008181526002602052604081209290925590546114fb916001600160a01b0390911690845b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b91908490611b5b565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611afc908590611b5b565b50505050565b600154611b0f9082611924565b60015533600090815260026020526040902054611b2c9082611924565b336000818152600260205260408120929092559054611b58916001600160a01b03909116903084611aa2565b50565b6060611bb0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c0c9092919063ffffffff16565b805190915015610b9157808060200190516020811015611bcf57600080fd5b5051610b915760405162461bcd60e51b815260040180806020018281038252602a815260200180611eff602a913960400191505060405180910390fd5b6060610535848460008585611c2085611d32565b611c71576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611cb05780518252601f199092019160209182019101611c91565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611d12576040519150601f19603f3d011682016040523d82523d6000602084013e611d17565b606091505b5091509150611d27828286611d38565b979650505050505050565b3b151590565b60608315611d475750816118b6565b825115611d575782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611da1578181015183820152602001611d89565b50505050905090810190601f168015611dce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060600160405280600081526020016000815260200160008152509056fe426f617264726f6f6d3a20546865206d656d62657220646f6573206e6f74206578697374426f617264726f6f6d3a2043616e6e6f7420616c6c6f63617465207768656e20746f74616c537570706c792069732030536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77426f617264726f6f6d3a207374696c6c20696e20726577617264206c6f636b75705f77697468647261774c6f636b757045706f6368733a206f7574206f662072616e6765426f617264726f6f6d3a2063616c6c6572206973206e6f7420746865206f70657261746f72426f617264726f6f6d3a207374696c6c20696e207769746864726177206c6f636b75705361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e426f617264726f6f6d3a20776974686472617720726571756573742067726561746572207468616e207374616b656420616d6f756e74a26469706673582212207de411a2c72cd6be41f5e4a32820b0da180803702594a3fa6fd62e554e1a5f2964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1767,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "share",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1180"
      },
      {
        "astId": 1769,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1773,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13417,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1906,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "operator",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1909,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "initialized",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 1911,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "jira",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)1180"
      },
      {
        "astId": 1913,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "treasury",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ITreasury)11581"
      },
      {
        "astId": 1917,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "members",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Memberseat)1897_storage)"
      },
      {
        "astId": 1920,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "boardroomHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(BoardroomSnapshot)1904_storage)dyn_storage"
      },
      {
        "astId": 1922,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "withdrawLockupEpochs",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1924,
        "contract": "contracts/Boardroom.sol:Boardroom",
        "label": "rewardLockupEpochs",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BoardroomSnapshot)1904_storage)dyn_storage": {
        "base": "t_struct(BoardroomSnapshot)1904_storage",
        "encoding": "dynamic_array",
        "label": "struct Boardroom.BoardroomSnapshot[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1180": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)11581": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Memberseat)1897_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Boardroom.Memberseat)",
        "numberOfBytes": "32",
        "value": "t_struct(Memberseat)1897_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_struct(BoardroomSnapshot)1904_storage": {
        "encoding": "inplace",
        "label": "struct Boardroom.BoardroomSnapshot",
        "members": [
          {
            "astId": 1899,
            "contract": "contracts/Boardroom.sol:Boardroom",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1901,
            "contract": "contracts/Boardroom.sol:Boardroom",
            "label": "rewardReceived",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1903,
            "contract": "contracts/Boardroom.sol:Boardroom",
            "label": "rewardPerShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Memberseat)1897_storage": {
        "encoding": "inplace",
        "label": "struct Boardroom.Memberseat",
        "members": [
          {
            "astId": 1892,
            "contract": "contracts/Boardroom.sol:Boardroom",
            "label": "lastSnapshotIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1894,
            "contract": "contracts/Boardroom.sol:Boardroom",
            "label": "rewardEarned",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1896,
            "contract": "contracts/Boardroom.sol:Boardroom",
            "label": "epochTimerStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}