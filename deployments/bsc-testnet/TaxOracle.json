{
  "address": "0x6FC43A17f2bca42cf85E296D218F1284Ff30182D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_jira",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_btcb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "btcb",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint144",
          "name": "amountOut",
          "type": "uint144"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBtcbBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getJiraBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jira",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_btcb",
          "type": "address"
        }
      ],
      "name": "setBtcb",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_jira",
          "type": "address"
        }
      ],
      "name": "setJira",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "setPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a50c90fd8f33c73fe0e8c04831b9e5055ed224b2b027f56e23b498b7982098e",
  "receipt": {
    "to": null,
    "from": "0x8F66b7C05B7010DCFf9Fc930ea44df397b7f3e08",
    "contractAddress": "0x6FC43A17f2bca42cf85E296D218F1284Ff30182D",
    "transactionIndex": 6,
    "gasUsed": "787423",
    "logsBloom": "0x
    "blockHash": "0x3193809c21dfeb0e5b2e54e2390e90a75fdeb5c94e2ddf466ad532dc4814d7a4",
    "transactionHash": "0x3a50c90fd8f33c73fe0e8c04831b9e5055ed224b2b027f56e23b498b7982098e",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 15376282,
        "transactionHash": "0x3a50c90fd8f33c73fe0e8c04831b9e5055ed224b2b027f56e23b498b7982098e",
        "address": "0x6FC43A17f2bca42cf85E296D218F1284Ff30182D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008f66b7c05b7010dcff9fc930ea44df397b7f3e08"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x3193809c21dfeb0e5b2e54e2390e90a75fdeb5c94e2ddf466ad532dc4814d7a4"
      }
    ],
    "blockNumber": 15376282,
    "cumulativeGasUsed": "1968304",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfCa3C604C50565b7eAc3187E5E3ba2DD1ed58a3a",
    "0x0dE8FCAE8421fc79B29adE9ffF97854a424Cad09",
    "0x3c7747978d56dE9a0B275E7c840B89c168a363c9"
  ],
  "numDeployments": 2,
  "solcInputHash": "09272786aa9b7d4ba6555ce839a0b675",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jira\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_btcb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"btcb\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint144\",\"name\":\"amountOut\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBtcbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJiraBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jira\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_btcb\",\"type\":\"address\"}],\"name\":\"setBtcb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jira\",\"type\":\"address\"}],\"name\":\"setJira\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TaxOracle.sol\":\"TaxOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/TaxOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\n\\n$$$$$$$\\\\   $$$$$$\\\\  $$\\\\      $$\\\\ $$$$$$$\\\\                                                            \\n$$  __$$\\\\ $$  __$$\\\\ $$$\\\\    $$$ |$$  __$$\\\\                                                           \\n$$ |  $$ |$$ /  $$ |$$$$\\\\  $$$$ |$$ |  $$ |    $$$$$$\\\\$$$$\\\\   $$$$$$\\\\  $$$$$$$\\\\   $$$$$$\\\\  $$\\\\   $$\\\\ \\n$$$$$$$\\\\ |$$ |  $$ |$$\\\\$$\\\\$$ $$ |$$$$$$$\\\\ |    $$  _$$  _$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$ |  $$ |\\n$$  __$$\\\\ $$ |  $$ |$$ \\\\$$$  $$ |$$  __$$\\\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\\n$$ |  $$ |$$ |  $$ |$$ |\\\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\\n$$$$$$$  | $$$$$$  |$$ | \\\\_/ $$ |$$$$$$$  |$$\\\\ $$ | $$ | $$ |\\\\$$$$$$  |$$ |  $$ |\\\\$$$$$$$\\\\ \\\\$$$$$$$ |\\n\\\\_______/  \\\\______/ \\\\__|     \\\\__|\\\\_______/ \\\\__|\\\\__| \\\\__| \\\\__| \\\\______/ \\\\__|  \\\\__| \\\\_______| \\\\____$$ |\\n                                                                                           $$\\\\   $$ |\\n                                                                                           \\\\$$$$$$  |\\n    http://jira.money                                                                      \\\\______/ \\n*/\\n\\n\\ncontract TaxOracle is Ownable {\\n    using SafeMath for uint256;\\n\\n    IERC20 public jira;\\n    IERC20 public btcb;\\n    address public pair;\\n\\n    constructor(\\n        address _jira,\\n        address _btcb,\\n        address _pair\\n    ) public {\\n        require(_jira != address(0), \\\"jira address cannot be 0\\\");\\n        require(_btcb != address(0), \\\"btcb address cannot be 0\\\");\\n        require(_pair != address(0), \\\"pair address cannot be 0\\\");\\n        jira = IERC20(_jira);\\n        btcb = IERC20(_btcb);\\n        pair = _pair;\\n    }\\n\\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut) {\\n        require(_token == address(jira), \\\"token needs to be jira\\\");\\n        uint256 jiraBalance = jira.balanceOf(pair);\\n        uint256 btcbBalance = btcb.balanceOf(pair);\\n        return uint144(jiraBalance.mul(_amountIn).div(btcbBalance));\\n    }\\n\\n    function getJiraBalance() external view returns (uint256) {\\n\\treturn jira.balanceOf(pair);\\n    }\\n\\n    function getBtcbBalance() external view returns (uint256) {\\n\\treturn btcb.balanceOf(pair);\\n    }\\n\\n    function getPrice() external view returns (uint256) {\\n        uint256 jiraBalance = jira.balanceOf(pair);\\n        uint256 btcbBalance = btcb.balanceOf(pair);\\n        return jiraBalance.mul(1e18).div(btcbBalance);\\n    }\\n\\n\\n    function setJira(address _jira) external onlyOwner {\\n        require(_jira != address(0), \\\"jira address cannot be 0\\\");\\n        jira = IERC20(_jira);\\n    }\\n\\n    function setBtcb(address _btcb) external onlyOwner {\\n        require(_btcb != address(0), \\\"btcb address cannot be 0\\\");\\n        btcb = IERC20(_btcb);\\n    }\\n\\n    function setPair(address _pair) external onlyOwner {\\n        require(_pair != address(0), \\\"pair address cannot be 0\\\");\\n        pair = _pair;\\n    }\\n\\n\\n\\n}\",\"keccak256\":\"0x8af890dc0bc029b3c3b08be3d96404c5ef1fe1a73723eb175ed1e7d65f8dd0a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d95380380610d958339818101604052606081101561003357600080fd5b5080516020820151604090920151909190600061004e6101eb565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0383166100f3576040805162461bcd60e51b815260206004820152601860248201527f6a69726120616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b6001600160a01b03821661014e576040805162461bcd60e51b815260206004820152601860248201527f6274636220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b6001600160a01b0381166101a9576040805162461bcd60e51b815260206004820152601860248201527f7061697220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600180546001600160a01b039485166001600160a01b0319918216179091556002805493851693821693909317909255600380549190931691161790556101ef565b3390565b610b97806101fe6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063a8aa1b3111610066578063a8aa1b31146101f1578063bb1365ca146101f9578063ede138b614610201578063f2fde38b14610209576100cf565b80638da5cb5b146101bd57806394e18f34146101e157806398d5fdca146101e9576100cf565b80633ddac953146100d457806343dbbd3e14610127578063509e32651461014157806353f4527014610169578063715018a61461018f5780638187f51614610197575b600080fd5b610100600480360360408110156100ea57600080fd5b506001600160a01b03813516906020013561022f565b6040805171ffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61012f6103b0565b60408051918252519081900360200190f35b6101676004803603602081101561015757600080fd5b50356001600160a01b0316610435565b005b6101676004803603602081101561017f57600080fd5b50356001600160a01b0316610514565b6101676105f3565b610167600480360360208110156101ad57600080fd5b50356001600160a01b031661069f565b6101c561077e565b604080516001600160a01b039092168252519081900360200190f35b61012f61078d565b61012f6107e1565b6101c5610900565b6101c561090f565b6101c561091e565b6101676004803603602081101561021f57600080fd5b50356001600160a01b031661092d565b6001546000906001600160a01b0384811691161461028d576040805162461bcd60e51b8152602060048201526016602482015275746f6b656e206e6565647320746f206265206a69726160501b604482015290519081900360640190fd5b600154600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d602081101561030b57600080fd5b5051600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b15801561036357600080fd5b505afa158015610377573d6000803e3d6000fd5b505050506040513d602081101561038d57600080fd5b505190506103a58161039f8487610a2f565b90610a8f565b925050505b92915050565b600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561040457600080fd5b505afa158015610418573d6000803e3d6000fd5b505050506040513d602081101561042e57600080fd5b5051905090565b61043d610af6565b6001600160a01b031661044e61077e565b6001600160a01b031614610497576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b0381166104f2576040805162461bcd60e51b815260206004820152601860248201527f6a69726120616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61051c610af6565b6001600160a01b031661052d61077e565b6001600160a01b031614610576576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b0381166105d1576040805162461bcd60e51b815260206004820152601860248201527f6274636220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6105fb610af6565b6001600160a01b031661060c61077e565b6001600160a01b031614610655576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6106a7610af6565b6001600160a01b03166106b861077e565b6001600160a01b031614610701576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b03811661075c576040805162461bcd60e51b815260206004820152601860248201527f7061697220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b600154600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561040457600080fd5b600154600354604080516370a0823160e01b81526001600160a01b0392831660048201529051600093849316916370a08231916024808301926020929190829003018186803b15801561083357600080fd5b505afa158015610847573d6000803e3d6000fd5b505050506040513d602081101561085d57600080fd5b5051600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506040513d60208110156108df57600080fd5b505190506108f98161039f84670de0b6b3a7640000610a2f565b9250505090565b6003546001600160a01b031681565b6002546001600160a01b031681565b6001546001600160a01b031681565b610935610af6565b6001600160a01b031661094661077e565b6001600160a01b03161461098f576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b0381166109d45760405162461bcd60e51b8152600401808060200182810382526026815260200180610afb6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082610a3e575060006103aa565b82820282848281610a4b57fe5b0414610a885760405162461bcd60e51b8152600401808060200182810382526021815260200180610b216021913960400191505060405180910390fd5b9392505050565b6000808211610ae5576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610aee57fe5b049392505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122076a45fabfaf88a9fbe158fe52a384ede1d1b9658ad6c6974523eaf62e999267c64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063a8aa1b3111610066578063a8aa1b31146101f1578063bb1365ca146101f9578063ede138b614610201578063f2fde38b14610209576100cf565b80638da5cb5b146101bd57806394e18f34146101e157806398d5fdca146101e9576100cf565b80633ddac953146100d457806343dbbd3e14610127578063509e32651461014157806353f4527014610169578063715018a61461018f5780638187f51614610197575b600080fd5b610100600480360360408110156100ea57600080fd5b506001600160a01b03813516906020013561022f565b6040805171ffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61012f6103b0565b60408051918252519081900360200190f35b6101676004803603602081101561015757600080fd5b50356001600160a01b0316610435565b005b6101676004803603602081101561017f57600080fd5b50356001600160a01b0316610514565b6101676105f3565b610167600480360360208110156101ad57600080fd5b50356001600160a01b031661069f565b6101c561077e565b604080516001600160a01b039092168252519081900360200190f35b61012f61078d565b61012f6107e1565b6101c5610900565b6101c561090f565b6101c561091e565b6101676004803603602081101561021f57600080fd5b50356001600160a01b031661092d565b6001546000906001600160a01b0384811691161461028d576040805162461bcd60e51b8152602060048201526016602482015275746f6b656e206e6565647320746f206265206a69726160501b604482015290519081900360640190fd5b600154600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d602081101561030b57600080fd5b5051600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b15801561036357600080fd5b505afa158015610377573d6000803e3d6000fd5b505050506040513d602081101561038d57600080fd5b505190506103a58161039f8487610a2f565b90610a8f565b925050505b92915050565b600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561040457600080fd5b505afa158015610418573d6000803e3d6000fd5b505050506040513d602081101561042e57600080fd5b5051905090565b61043d610af6565b6001600160a01b031661044e61077e565b6001600160a01b031614610497576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b0381166104f2576040805162461bcd60e51b815260206004820152601860248201527f6a69726120616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61051c610af6565b6001600160a01b031661052d61077e565b6001600160a01b031614610576576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b0381166105d1576040805162461bcd60e51b815260206004820152601860248201527f6274636220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6105fb610af6565b6001600160a01b031661060c61077e565b6001600160a01b031614610655576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6106a7610af6565b6001600160a01b03166106b861077e565b6001600160a01b031614610701576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b03811661075c576040805162461bcd60e51b815260206004820152601860248201527f7061697220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b600154600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561040457600080fd5b600154600354604080516370a0823160e01b81526001600160a01b0392831660048201529051600093849316916370a08231916024808301926020929190829003018186803b15801561083357600080fd5b505afa158015610847573d6000803e3d6000fd5b505050506040513d602081101561085d57600080fd5b5051600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506040513d60208110156108df57600080fd5b505190506108f98161039f84670de0b6b3a7640000610a2f565b9250505090565b6003546001600160a01b031681565b6002546001600160a01b031681565b6001546001600160a01b031681565b610935610af6565b6001600160a01b031661094661077e565b6001600160a01b03161461098f576040805162461bcd60e51b81526020600482018190526024820152600080516020610b42833981519152604482015290519081900360640190fd5b6001600160a01b0381166109d45760405162461bcd60e51b8152600401808060200182810382526026815260200180610afb6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082610a3e575060006103aa565b82820282848281610a4b57fe5b0414610a885760405162461bcd60e51b8152600401808060200182810382526021815260200180610b216021913960400191505060405180910390fd5b9392505050565b6000808211610ae5576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610aee57fe5b049392505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122076a45fabfaf88a9fbe158fe52a384ede1d1b9658ad6c6974523eaf62e999267c64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/TaxOracle.sol:TaxOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5229,
        "contract": "contracts/TaxOracle.sol:TaxOracle",
        "label": "jira",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1180"
      },
      {
        "astId": 5231,
        "contract": "contracts/TaxOracle.sol:TaxOracle",
        "label": "btcb",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1180"
      },
      {
        "astId": 5233,
        "contract": "contracts/TaxOracle.sol:TaxOracle",
        "label": "pair",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1180": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}