{
  "language": "Solidity",
  "sources": {
    "contracts/BBond.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\r\n\r\nimport \"./owner/Operator.sol\";\r\n\r\n/*\r\n\r\n$$$$$$$\\   $$$$$$\\  $$\\      $$\\ $$$$$$$\\                                                            \r\n$$  __$$\\ $$  __$$\\ $$$\\    $$$ |$$  __$$\\                                                           \r\n$$ |  $$ |$$ /  $$ |$$$$\\  $$$$ |$$ |  $$ |    $$$$$$\\$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n$$$$$$$\\ |$$ |  $$ |$$\\$$\\$$ $$ |$$$$$$$\\ |    $$  _$$  _$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n$$  __$$\\ $$ |  $$ |$$ \\$$$  $$ |$$  __$$\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\r\n$$ |  $$ |$$ |  $$ |$$ |\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\r\n$$$$$$$  | $$$$$$  |$$ | \\_/ $$ |$$$$$$$  |$$\\ $$ | $$ | $$ |\\$$$$$$  |$$ |  $$ |\\$$$$$$$\\ \\$$$$$$$ |\r\n\\_______/  \\______/ \\__|     \\__|\\_______/ \\__|\\__| \\__| \\__| \\______/ \\__|  \\__| \\_______| \\____$$ |\r\n                                                                                           $$\\   $$ |\r\n                                                                                           \\$$$$$$  |\r\n    http://bomb.money                                                                      \\______/ \r\n*/\r\ncontract BBond is ERC20Burnable, Operator {\r\n    /**\r\n     * @notice Constructs the BOMB Bond ERC-20 contract.\r\n     */\r\n    constructor() public ERC20(\"BBOND\", \"BBOND\") {}\r\n\r\n    /**\r\n     * @notice Operator mints basis bonds to a recipient\r\n     * @param recipient_ The address of recipient\r\n     * @param amount_ The amount of basis bonds to mint to\r\n     * @return whether the process has been done\r\n     */\r\n    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {\r\n        uint256 balanceBefore = balanceOf(recipient_);\r\n        _mint(recipient_, amount_);\r\n        uint256 balanceAfter = balanceOf(recipient_);\r\n\r\n        return balanceAfter > balanceBefore;\r\n    }\r\n\r\n    function burn(uint256 amount) public override {\r\n        super.burn(amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\r\n        super.burnFrom(account, amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/owner/Operator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Operator is Context, Ownable {\r\n    address private _operator;\r\n\r\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\r\n\r\n    constructor() internal {\r\n        _operator = _msgSender();\r\n        emit OperatorTransferred(address(0), _operator);\r\n    }\r\n\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(_operator == msg.sender, \"operator: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    function isOperator() public view returns (bool) {\r\n        return _msgSender() == _operator;\r\n    }\r\n\r\n    function transferOperator(address newOperator_) public onlyOwner {\r\n        _transferOperator(newOperator_);\r\n    }\r\n\r\n    function _transferOperator(address newOperator_) internal {\r\n        require(newOperator_ != address(0), \"operator: zero address given for new operator\");\r\n        emit OperatorTransferred(address(0), newOperator_);\r\n        _operator = newOperator_;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/Math.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\nimport \"./lib/Babylonian.sol\";\r\nimport \"./owner/Operator.sol\";\r\nimport \"./utils/ContractGuard.sol\";\r\nimport \"./interfaces/IBasisAsset.sol\";\r\nimport \"./interfaces/IOracle.sol\";\r\nimport \"./interfaces/IBoardroom.sol\";\r\n\r\n/*\r\n\r\n$$$$$$$\\   $$$$$$\\  $$\\      $$\\ $$$$$$$\\                                                            \r\n$$  __$$\\ $$  __$$\\ $$$\\    $$$ |$$  __$$\\                                                           \r\n$$ |  $$ |$$ /  $$ |$$$$\\  $$$$ |$$ |  $$ |    $$$$$$\\$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n$$$$$$$\\ |$$ |  $$ |$$\\$$\\$$ $$ |$$$$$$$\\ |    $$  _$$  _$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n$$  __$$\\ $$ |  $$ |$$ \\$$$  $$ |$$  __$$\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\r\n$$ |  $$ |$$ |  $$ |$$ |\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\r\n$$$$$$$  | $$$$$$  |$$ | \\_/ $$ |$$$$$$$  |$$\\ $$ | $$ | $$ |\\$$$$$$  |$$ |  $$ |\\$$$$$$$\\ \\$$$$$$$ |\r\n\\_______/  \\______/ \\__|     \\__|\\_______/ \\__|\\__| \\__| \\__| \\______/ \\__|  \\__| \\_______| \\____$$ |\r\n                                                                                           $$\\   $$ |\r\n                                                                                           \\$$$$$$  |\r\n    http://bomb.money                                                                      \\______/ \r\n*/\r\ncontract Treasury is ContractGuard {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    /* ========= CONSTANT VARIABLES ======== */\r\n\r\n    uint256 public constant PERIOD = 6 hours;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // governance\r\n    address public operator;\r\n\r\n    // flags\r\n    bool public initialized = false;\r\n\r\n    // epoch\r\n    uint256 public startTime;\r\n    uint256 public epoch = 0;\r\n    uint256 public epochSupplyContractionLeft = 0;\r\n\r\n    // exclusions from total supply\r\n    address[] public excludedFromTotalSupply = [\r\n        address(0xB7e1E341b2CBCc7d1EdF4DC6E5e962aE5C621ca5), // BombGenesisPool\r\n        address(0x04b79c851ed1A36549C6151189c79EC0eaBca745) // new BombRewardPool\r\n    ];\r\n\r\n    // core components\r\n    address public bomb;\r\n    address public bbond;\r\n    address public bshare;\r\n\r\n    address public boardroom;\r\n    address public bombOracle;\r\n\r\n    // price\r\n    uint256 public bombPriceOne;\r\n    uint256 public bombPriceCeiling;\r\n\r\n    uint256 public seigniorageSaved;\r\n\r\n    uint256[] public supplyTiers;\r\n    uint256[] public maxExpansionTiers;\r\n\r\n    uint256 public maxSupplyExpansionPercent;\r\n    uint256 public bondDepletionFloorPercent;\r\n    uint256 public seigniorageExpansionFloorPercent;\r\n    uint256 public maxSupplyContractionPercent;\r\n    uint256 public maxDebtRatioPercent;\r\n\r\n    // 28 first epochs (1 week) with 4.5% expansion regardless of BOMB price\r\n    uint256 public bootstrapEpochs;\r\n    uint256 public bootstrapSupplyExpansionPercent;\r\n\r\n    /* =================== Added variables =================== */\r\n    uint256 public previousEpochBombPrice;\r\n    uint256 public maxDiscountRate; // when purchasing bond\r\n    uint256 public maxPremiumRate; // when redeeming bond\r\n    uint256 public discountPercent;\r\n    uint256 public premiumThreshold;\r\n    uint256 public premiumPercent;\r\n    uint256 public mintingFactorForPayingDebt; // print extra BOMB during debt phase\r\n\r\n    address public daoFund;\r\n    uint256 public daoFundSharedPercent;\r\n\r\n    address public devFund;\r\n    uint256 public devFundSharedPercent;\r\n\r\n    /* =================== Events =================== */\r\n\r\n    event Initialized(address indexed executor, uint256 at);\r\n    event BurnedBonds(address indexed from, uint256 bondAmount);\r\n    event RedeemedBonds(address indexed from, uint256 bombAmount, uint256 bondAmount);\r\n    event BoughtBonds(address indexed from, uint256 bombAmount, uint256 bondAmount);\r\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\r\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\r\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\r\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\r\n\r\n    /* =================== Modifier =================== */\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"Treasury: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    modifier checkCondition() {\r\n        require(now >= startTime, \"Treasury: not started yet\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier checkEpoch() {\r\n        require(now >= nextEpochPoint(), \"Treasury: not opened yet\");\r\n\r\n        _;\r\n\r\n        epoch = epoch.add(1);\r\n        epochSupplyContractionLeft = (getBombPrice() > bombPriceCeiling) ? 0 : getBombCirculatingSupply().mul(maxSupplyContractionPercent).div(10000);\r\n    }\r\n\r\n    modifier checkOperator() {\r\n        require(\r\n            IBasisAsset(bomb).operator() == address(this) &&\r\n                IBasisAsset(bbond).operator() == address(this) &&\r\n                IBasisAsset(bshare).operator() == address(this) &&\r\n                Operator(boardroom).operator() == address(this),\r\n            \"Treasury: need more permission\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier notInitialized() {\r\n        require(!initialized, \"Treasury: already initialized\");\r\n\r\n        _;\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // epoch\r\n    function nextEpochPoint() public view returns (uint256) {\r\n        return startTime.add(epoch.mul(PERIOD));\r\n    }\r\n\r\n    // oracle\r\n    function getBombPrice() public view returns (uint256 bombPrice) {\r\n        try IOracle(bombOracle).consult(bomb, 1e18) returns (uint144 price) {\r\n            return uint256(price);\r\n        } catch {\r\n            revert(\"Treasury: failed to consult BOMB price from the oracle\");\r\n        }\r\n    }\r\n\r\n    function getBombUpdatedPrice() public view returns (uint256 _bombPrice) {\r\n        try IOracle(bombOracle).twap(bomb, 1e18) returns (uint144 price) {\r\n            return uint256(price);\r\n        } catch {\r\n            revert(\"Treasury: failed to consult BOMB price from the oracle\");\r\n        }\r\n    }\r\n\r\n    // budget\r\n    function getReserve() public view returns (uint256) {\r\n        return seigniorageSaved;\r\n    }\r\n\r\n    function getBurnableBombLeft() public view returns (uint256 _burnableBombLeft) {\r\n        uint256 _bombPrice = getBombPrice();\r\n        if (_bombPrice <= bombPriceOne) {\r\n            uint256 _bombSupply = getBombCirculatingSupply();\r\n            uint256 _bondMaxSupply = _bombSupply.mul(maxDebtRatioPercent).div(10000);\r\n            uint256 _bondSupply = IERC20(bbond).totalSupply();\r\n            if (_bondMaxSupply > _bondSupply) {\r\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\r\n                uint256 _maxBurnableBomb = _maxMintableBond.mul(_bombPrice).div(1e14);\r\n                _burnableBombLeft = Math.min(epochSupplyContractionLeft, _maxBurnableBomb);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRedeemableBonds() public view returns (uint256 _redeemableBonds) {\r\n        uint256 _bombPrice = getBombPrice();\r\n        if (_bombPrice > bombPriceCeiling) {\r\n            uint256 _totalBomb = IERC20(bomb).balanceOf(address(this));\r\n            uint256 _rate = getBondPremiumRate();\r\n            if (_rate > 0) {\r\n                _redeemableBonds = _totalBomb.mul(1e14).div(_rate);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBondDiscountRate() public view returns (uint256 _rate) {\r\n        uint256 _bombPrice = getBombPrice();\r\n        if (_bombPrice <= bombPriceOne) {\r\n            if (discountPercent == 0) {\r\n                // no discount\r\n                _rate = bombPriceOne;\r\n            } else {\r\n                uint256 _bondAmount = bombPriceOne.mul(1e18).div(_bombPrice); // to burn 1 BOMB\r\n                uint256 _discountAmount = _bondAmount.sub(bombPriceOne).mul(discountPercent).div(10000);\r\n                _rate = bombPriceOne.add(_discountAmount);\r\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\r\n                    _rate = maxDiscountRate;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBondPremiumRate() public view returns (uint256 _rate) {\r\n        uint256 _bombPrice = getBombPrice();\r\n        if (_bombPrice > bombPriceCeiling) {\r\n            uint256 _bombPricePremiumThreshold = bombPriceOne.mul(premiumThreshold).div(100);\r\n            if (_bombPrice >= _bombPricePremiumThreshold) {\r\n                //Price > 1.10\r\n                uint256 _premiumAmount = _bombPrice.sub(bombPriceOne).mul(premiumPercent).div(10000);\r\n                _rate = bombPriceOne.add(_premiumAmount);\r\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\r\n                    _rate = maxPremiumRate;\r\n                }\r\n            } else {\r\n                // no premium bonus\r\n                _rate = bombPriceOne;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function initialize(\r\n        address _bomb,\r\n        address _bbond,\r\n        address _bshare,\r\n        address _bombOracle,\r\n        address _boardroom,\r\n        uint256 _startTime\r\n    ) public notInitialized {\r\n        bomb = _bomb;\r\n        bbond = _bbond;\r\n        bshare = _bshare;\r\n        bombOracle = _bombOracle;\r\n        boardroom = _boardroom;\r\n        startTime = _startTime;\r\n\r\n        bombPriceOne = 10**14; // This is to allow a PEG of 10,000 BOMB per BTC\r\n        bombPriceCeiling = bombPriceOne.mul(101).div(100);\r\n\r\n        // Dynamic max expansion percent\r\n        supplyTiers = [0 ether, 500000 ether, 1000000 ether, 1500000 ether, 2000000 ether, 5000000 ether, 10000000 ether, 20000000 ether, 50000000 ether];\r\n        maxExpansionTiers = [450, 400, 350, 300, 250, 200, 150, 125, 100];\r\n\r\n        maxSupplyExpansionPercent = 400; // Upto 4.0% supply for expansion\r\n\r\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\r\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for boardroom\r\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn BOMB and mint tBOND)\r\n        maxDebtRatioPercent = 4500; // Upto 35% supply of tBOND to purchase\r\n\r\n        premiumThreshold = 110;\r\n        premiumPercent = 7000;\r\n\r\n        // First 28 epochs with 4.5% expansion\r\n        bootstrapEpochs = 0;\r\n        bootstrapSupplyExpansionPercent = 450;\r\n\r\n        // set seigniorageSaved to it's balance\r\n        seigniorageSaved = IERC20(bomb).balanceOf(address(this));\r\n\r\n        initialized = true;\r\n        operator = msg.sender;\r\n        emit Initialized(msg.sender, block.number);\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function setBoardroom(address _boardroom) external onlyOperator {\r\n        boardroom = _boardroom;\r\n    }\r\n\r\n    function setBombOracle(address _bombOracle) external onlyOperator {\r\n        bombOracle = _bombOracle;\r\n    }\r\n\r\n    function setBombPriceCeiling(uint256 _bombPriceCeiling) external onlyOperator {\r\n        require(_bombPriceCeiling >= bombPriceOne && _bombPriceCeiling <= bombPriceOne.mul(120).div(100), \"out of range\"); // [$1.0, $1.2]\r\n        bombPriceCeiling = _bombPriceCeiling;\r\n    }\r\n\r\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent) external onlyOperator {\r\n        require(_maxSupplyExpansionPercent >= 10 && _maxSupplyExpansionPercent <= 1000, \"_maxSupplyExpansionPercent: out of range\"); // [0.1%, 10%]\r\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\r\n    }\r\n\r\n    function setSupplyTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\r\n        require(_index >= 0, \"Index has to be higher than 0\");\r\n        require(_index < 9, \"Index has to be lower than count of tiers\");\r\n        if (_index > 0) {\r\n            require(_value > supplyTiers[_index - 1]);\r\n        }\r\n        if (_index < 8) {\r\n            require(_value < supplyTiers[_index + 1]);\r\n        }\r\n        supplyTiers[_index] = _value;\r\n        return true;\r\n    }\r\n\r\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\r\n        require(_index >= 0, \"Index has to be higher than 0\");\r\n        require(_index < 9, \"Index has to be lower than count of tiers\");\r\n        require(_value >= 10 && _value <= 1000, \"_value: out of range\"); // [0.1%, 10%]\r\n        maxExpansionTiers[_index] = _value;\r\n        return true;\r\n    }\r\n\r\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent) external onlyOperator {\r\n        require(_bondDepletionFloorPercent >= 500 && _bondDepletionFloorPercent <= 10000, \"out of range\"); // [5%, 100%]\r\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\r\n    }\r\n\r\n    function setMaxSupplyContractionPercent(uint256 _maxSupplyContractionPercent) external onlyOperator {\r\n        require(_maxSupplyContractionPercent >= 100 && _maxSupplyContractionPercent <= 1500, \"out of range\"); // [0.1%, 15%]\r\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\r\n    }\r\n\r\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent) external onlyOperator {\r\n        require(_maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000, \"out of range\"); // [10%, 100%]\r\n        maxDebtRatioPercent = _maxDebtRatioPercent;\r\n    }\r\n\r\n    function setBootstrap(uint256 _bootstrapEpochs, uint256 _bootstrapSupplyExpansionPercent) external onlyOperator {\r\n        require(_bootstrapEpochs <= 120, \"_bootstrapEpochs: out of range\"); // <= 1 month\r\n        require(_bootstrapSupplyExpansionPercent >= 100 && _bootstrapSupplyExpansionPercent <= 1000, \"_bootstrapSupplyExpansionPercent: out of range\"); // [1%, 10%]\r\n        bootstrapEpochs = _bootstrapEpochs;\r\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\r\n    }\r\n\r\n    function setExtraFunds(\r\n        address _daoFund,\r\n        uint256 _daoFundSharedPercent,\r\n        address _devFund,\r\n        uint256 _devFundSharedPercent\r\n    ) external onlyOperator {\r\n        require(_daoFund != address(0), \"zero\");\r\n        require(_daoFundSharedPercent <= 3000, \"out of range\"); // <= 30%\r\n        require(_devFund != address(0), \"zero\");\r\n        require(_devFundSharedPercent <= 1000, \"out of range\"); // <= 10%\r\n        daoFund = _daoFund;\r\n        daoFundSharedPercent = _daoFundSharedPercent;\r\n        devFund = _devFund;\r\n        devFundSharedPercent = _devFundSharedPercent;\r\n    }\r\n\r\n    function setMaxDiscountRate(uint256 _maxDiscountRate) external onlyOperator {\r\n        maxDiscountRate = _maxDiscountRate;\r\n    }\r\n\r\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\r\n        maxPremiumRate = _maxPremiumRate;\r\n    }\r\n\r\n    function setDiscountPercent(uint256 _discountPercent) external onlyOperator {\r\n        require(_discountPercent <= 20000, \"_discountPercent is over 200%\");\r\n        discountPercent = _discountPercent;\r\n    }\r\n\r\n    function setPremiumThreshold(uint256 _premiumThreshold) external onlyOperator {\r\n        require(_premiumThreshold >= bombPriceCeiling, \"_premiumThreshold exceeds bombPriceCeiling\");\r\n        require(_premiumThreshold <= 150, \"_premiumThreshold is higher than 1.5\");\r\n        premiumThreshold = _premiumThreshold;\r\n    }\r\n\r\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\r\n        require(_premiumPercent <= 20000, \"_premiumPercent is over 200%\");\r\n        premiumPercent = _premiumPercent;\r\n    }\r\n\r\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt) external onlyOperator {\r\n        require(_mintingFactorForPayingDebt >= 10000 && _mintingFactorForPayingDebt <= 20000, \"_mintingFactorForPayingDebt: out of range\"); // [100%, 200%]\r\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\r\n    }\r\n\r\n    /* ========== MUTABLE FUNCTIONS ========== */\r\n\r\n    function _updateBombPrice() internal {\r\n        try IOracle(bombOracle).update() {} catch {}\r\n    }\r\n\r\n    function getBombCirculatingSupply() public view returns (uint256) {\r\n        IERC20 bombErc20 = IERC20(bomb);\r\n        uint256 totalSupply = bombErc20.totalSupply();\r\n        uint256 balanceExcluded = 0;\r\n        for (uint8 entryId = 0; entryId < excludedFromTotalSupply.length; ++entryId) {\r\n            balanceExcluded = balanceExcluded.add(bombErc20.balanceOf(excludedFromTotalSupply[entryId]));\r\n        }\r\n        return totalSupply.sub(balanceExcluded);\r\n    }\r\n\r\n    function buyBonds(uint256 _bombAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\r\n        require(_bombAmount > 0, \"Treasury: cannot purchase bonds with zero amount\");\r\n\r\n        uint256 bombPrice = getBombPrice();\r\n        require(bombPrice == targetPrice, \"Treasury: BOMB price moved\");\r\n        require(\r\n            bombPrice < bombPriceOne, // price < $1\r\n            \"Treasury: bombPrice not eligible for bond purchase\"\r\n        );\r\n\r\n        require(_bombAmount <= epochSupplyContractionLeft, \"Treasury: not enough bond left to purchase\");\r\n\r\n        uint256 _rate = getBondDiscountRate();\r\n        require(_rate > 0, \"Treasury: invalid bond rate\");\r\n\r\n        uint256 _bondAmount = _bombAmount.mul(_rate).div(1e14);\r\n        uint256 bombSupply = getBombCirculatingSupply();\r\n        uint256 newBondSupply = IERC20(bbond).totalSupply().add(_bondAmount);\r\n        require(newBondSupply <= bombSupply.mul(maxDebtRatioPercent).div(10000), \"over max debt ratio\");\r\n\r\n        IBasisAsset(bomb).burnFrom(msg.sender, _bombAmount);\r\n        IBasisAsset(bbond).mint(msg.sender, _bondAmount);\r\n\r\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(_bombAmount);\r\n        _updateBombPrice();\r\n\r\n        emit BoughtBonds(msg.sender, _bombAmount, _bondAmount);\r\n    }\r\n\r\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\r\n        require(_bondAmount > 0, \"Treasury: cannot redeem bonds with zero amount\");\r\n\r\n        uint256 bombPrice = getBombPrice();\r\n        require(bombPrice == targetPrice, \"Treasury: BOMB price moved\");\r\n        require(\r\n            bombPrice > bombPriceCeiling, // price > $1.01\r\n            \"Treasury: bombPrice not eligible for bond purchase\"\r\n        );\r\n\r\n        uint256 _rate = getBondPremiumRate();\r\n        require(_rate > 0, \"Treasury: invalid bond rate\");\r\n\r\n        uint256 _bombAmount = _bondAmount.mul(_rate).div(1e14);\r\n        require(IERC20(bomb).balanceOf(address(this)) >= _bombAmount, \"Treasury: treasury has no more budget\");\r\n\r\n        seigniorageSaved = seigniorageSaved.sub(Math.min(seigniorageSaved, _bombAmount));\r\n\r\n        IBasisAsset(bbond).burnFrom(msg.sender, _bondAmount);\r\n        IERC20(bomb).safeTransfer(msg.sender, _bombAmount);\r\n\r\n        _updateBombPrice();\r\n\r\n        emit RedeemedBonds(msg.sender, _bombAmount, _bondAmount);\r\n    }\r\n\r\n    function _sendToBoardroom(uint256 _amount) internal {\r\n        IBasisAsset(bomb).mint(address(this), _amount);\r\n\r\n        uint256 _daoFundSharedAmount = 0;\r\n        if (daoFundSharedPercent > 0) {\r\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\r\n            IERC20(bomb).transfer(daoFund, _daoFundSharedAmount);\r\n            emit DaoFundFunded(now, _daoFundSharedAmount);\r\n        }\r\n\r\n        uint256 _devFundSharedAmount = 0;\r\n        if (devFundSharedPercent > 0) {\r\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\r\n            IERC20(bomb).transfer(devFund, _devFundSharedAmount);\r\n            emit DevFundFunded(now, _devFundSharedAmount);\r\n        }\r\n\r\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount);\r\n\r\n        IERC20(bomb).safeApprove(boardroom, 0);\r\n        IERC20(bomb).safeApprove(boardroom, _amount);\r\n        IBoardroom(boardroom).allocateSeigniorage(_amount);\r\n        emit BoardroomFunded(now, _amount);\r\n    }\r\n\r\n    function _calculateMaxSupplyExpansionPercent(uint256 _bombSupply) internal returns (uint256) {\r\n        for (uint8 tierId = 8; tierId >= 0; --tierId) {\r\n            if (_bombSupply >= supplyTiers[tierId]) {\r\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\r\n                break;\r\n            }\r\n        }\r\n        return maxSupplyExpansionPercent;\r\n    }\r\n\r\n    function allocateSeigniorage() external onlyOneBlock checkCondition checkEpoch checkOperator {\r\n        _updateBombPrice();\r\n        previousEpochBombPrice = getBombPrice();\r\n        uint256 bombSupply = getBombCirculatingSupply().sub(seigniorageSaved);\r\n        if (epoch < bootstrapEpochs) {\r\n            // 28 first epochs with 4.5% expansion\r\n            _sendToBoardroom(bombSupply.mul(bootstrapSupplyExpansionPercent).div(10000));\r\n        } else {\r\n            if (previousEpochBombPrice > bombPriceCeiling) {\r\n                // Expansion ($BOMB Price > 1 $ETH): there is some seigniorage to be allocated\r\n                uint256 bondSupply = IERC20(bbond).totalSupply();\r\n                uint256 _percentage = previousEpochBombPrice.sub(bombPriceOne);\r\n                uint256 _savedForBond;\r\n                uint256 _savedForBoardroom;\r\n                uint256 _mse = _calculateMaxSupplyExpansionPercent(bombSupply).mul(1e14);\r\n                if (_percentage > _mse) {\r\n                    _percentage = _mse;\r\n                }\r\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\r\n                    // saved enough to pay debt, mint as usual rate\r\n                    _savedForBoardroom = bombSupply.mul(_percentage).div(1e14);\r\n                } else {\r\n                    // have not saved enough to pay debt, mint more\r\n                    uint256 _seigniorage = bombSupply.mul(_percentage).div(1e14);\r\n                    _savedForBoardroom = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\r\n                    _savedForBond = _seigniorage.sub(_savedForBoardroom);\r\n                    if (mintingFactorForPayingDebt > 0) {\r\n                        _savedForBond = _savedForBond.mul(mintingFactorForPayingDebt).div(10000);\r\n                    }\r\n                }\r\n                if (_savedForBoardroom > 0) {\r\n                    _sendToBoardroom(_savedForBoardroom);\r\n                }\r\n                if (_savedForBond > 0) {\r\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\r\n                    IBasisAsset(bomb).mint(address(this), _savedForBond);\r\n                    emit TreasuryFunded(now, _savedForBond);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        // do not allow to drain core tokens\r\n        require(address(_token) != address(bomb), \"bomb\");\r\n        require(address(_token) != address(bbond), \"bond\");\r\n        require(address(_token) != address(bshare), \"share\");\r\n        _token.safeTransfer(_to, _amount);\r\n    }\r\n\r\n    function boardroomSetOperator(address _operator) external onlyOperator {\r\n        IBoardroom(boardroom).setOperator(_operator);\r\n    }\r\n\r\n    function boardroomSetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\r\n        IBoardroom(boardroom).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\r\n    }\r\n\r\n    function boardroomAllocateSeigniorage(uint256 amount) external onlyOperator {\r\n        IBoardroom(boardroom).allocateSeigniorage(amount);\r\n    }\r\n\r\n    function boardroomGovernanceRecoverUnsupported(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        IBoardroom(boardroom).governanceRecoverUnsupported(_token, _amount, _to);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/lib/Babylonian.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}\r\n"
    },
    "contracts/utils/ContractGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract ContractGuard {\r\n    mapping(uint256 => mapping(address => bool)) private _status;\r\n\r\n    function checkSameOriginReentranted() internal view returns (bool) {\r\n        return _status[block.number][tx.origin];\r\n    }\r\n\r\n    function checkSameSenderReentranted() internal view returns (bool) {\r\n        return _status[block.number][msg.sender];\r\n    }\r\n\r\n    modifier onlyOneBlock() {\r\n        require(!checkSameOriginReentranted(), \"ContractGuard: one block, one function\");\r\n        require(!checkSameSenderReentranted(), \"ContractGuard: one block, one function\");\r\n\r\n        _;\r\n\r\n        _status[block.number][tx.origin] = true;\r\n        _status[block.number][msg.sender] = true;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IBasisAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IBasisAsset {\r\n    function mint(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address from, uint256 amount) external;\r\n\r\n    function isOperator() external returns (bool);\r\n\r\n    function operator() external view returns (address);\r\n\r\n    function transferOperator(address newOperator_) external;\r\n}\r\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IOracle {\r\n    function update() external;\r\n\r\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut);\r\n\r\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\r\n}\r\n"
    },
    "contracts/interfaces/IBoardroom.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IBoardroom {\r\n    function balanceOf(address _member) external view returns (uint256);\r\n\r\n    function earned(address _member) external view returns (uint256);\r\n\r\n    function canWithdraw(address _member) external view returns (bool);\r\n\r\n    function canClaimReward(address _member) external view returns (bool);\r\n\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function getBombPrice() external view returns (uint256);\r\n\r\n    function setOperator(address _operator) external;\r\n\r\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\r\n\r\n    function stake(uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    function exit() external;\r\n\r\n    function claimReward() external;\r\n\r\n    function allocateSeigniorage(uint256 _amount) external;\r\n\r\n    function governanceRecoverUnsupported(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Bomb.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\r\nimport \"@openzeppelin/contracts/math/Math.sol\";\r\n\r\nimport \"./lib/SafeMath8.sol\";\r\nimport \"./owner/Operator.sol\";\r\nimport \"./interfaces/IOracle.sol\";\r\n\r\n/*\r\n\r\n$$$$$$$\\   $$$$$$\\  $$\\      $$\\ $$$$$$$\\                                                            \r\n$$  __$$\\ $$  __$$\\ $$$\\    $$$ |$$  __$$\\                                                           \r\n$$ |  $$ |$$ /  $$ |$$$$\\  $$$$ |$$ |  $$ |    $$$$$$\\$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n$$$$$$$\\ |$$ |  $$ |$$\\$$\\$$ $$ |$$$$$$$\\ |    $$  _$$  _$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n$$  __$$\\ $$ |  $$ |$$ \\$$$  $$ |$$  __$$\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\r\n$$ |  $$ |$$ |  $$ |$$ |\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\r\n$$$$$$$  | $$$$$$  |$$ | \\_/ $$ |$$$$$$$  |$$\\ $$ | $$ | $$ |\\$$$$$$  |$$ |  $$ |\\$$$$$$$\\ \\$$$$$$$ |\r\n\\_______/  \\______/ \\__|     \\__|\\_______/ \\__|\\__| \\__| \\__| \\______/ \\__|  \\__| \\_______| \\____$$ |\r\n                                                                                           $$\\   $$ |\r\n                                                                                           \\$$$$$$  |\r\n    http://bomb.money                                                                      \\______/ \r\n*/\r\ncontract Bomb is ERC20Burnable, Operator {\r\n    using SafeMath8 for uint8;\r\n    using SafeMath for uint256;\r\n\r\n    // Initial distribution for the first 24h genesis pools\r\n    uint256 public constant INITIAL_GENESIS_POOL_DISTRIBUTION = 11000 ether;\r\n    // Initial distribution for the day 2-5 BOMB-WETH LP -> BOMB pool\r\n    uint256 public constant INITIAL_BOMB_POOL_DISTRIBUTION = 140000 ether;\r\n    // Distribution for airdrops wallet\r\n    uint256 public constant INITIAL_AIRDROP_WALLET_DISTRIBUTION = 9000 ether;\r\n\r\n    // Have the rewards been distributed to the pools\r\n    bool public rewardPoolDistributed = false;\r\n\r\n    /* ================= Taxation =============== */\r\n    // Address of the Oracle\r\n    address public bombOracle;\r\n    // Address of the Tax Office\r\n    address public taxOffice;\r\n\r\n    // Current tax rate\r\n    uint256 public taxRate;\r\n    // Price threshold below which taxes will get burned\r\n    uint256 public burnThreshold = 1.10e18;\r\n    // Address of the tax collector wallet\r\n    address public taxCollectorAddress;\r\n\r\n    // Should the taxes be calculated using the tax tiers\r\n    bool public autoCalculateTax;\r\n\r\n    // Tax Tiers\r\n    uint256[] public taxTiersTwaps = [0, 5e17, 6e17, 7e17, 8e17, 9e17, 9.5e17, 1e18, 1.05e18, 1.10e18, 1.20e18, 1.30e18, 1.40e18, 1.50e18];\r\n    uint256[] public taxTiersRates = [2000, 1900, 1800, 1700, 1600, 1500, 1500, 1500, 1500, 1400, 900, 400, 200, 100];\r\n\r\n    // Sender addresses excluded from Tax\r\n    mapping(address => bool) public excludedAddresses;\r\n\r\n    event TaxOfficeTransferred(address oldAddress, address newAddress);\r\n\r\n    modifier onlyTaxOffice() {\r\n        require(taxOffice == msg.sender, \"Caller is not the tax office\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperatorOrTaxOffice() {\r\n        require(isOperator() || taxOffice == msg.sender, \"Caller is not the operator or the tax office\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructs the BOMB ERC-20 contract.\r\n     */\r\n    constructor(uint256 _taxRate, address _taxCollectorAddress) public ERC20(\"bomb.money\", \"BOMB\") {\r\n        // Mints 1 BOMB to contract creator for initial pool setup\r\n        require(_taxRate < 10000, \"tax equal or bigger to 100%\");\r\n        require(_taxCollectorAddress != address(0), \"tax collector address must be non-zero address\");\r\n\r\n        excludeAddress(address(this));\r\n\r\n        _mint(msg.sender, 1 ether);\r\n        taxRate = _taxRate;\r\n        taxCollectorAddress = _taxCollectorAddress;\r\n    }\r\n\r\n    /* ============= Taxation ============= */\r\n\r\n    function getTaxTiersTwapsCount() public view returns (uint256 count) {\r\n        return taxTiersTwaps.length;\r\n    }\r\n\r\n    function getTaxTiersRatesCount() public view returns (uint256 count) {\r\n        return taxTiersRates.length;\r\n    }\r\n\r\n    function isAddressExcluded(address _address) public view returns (bool) {\r\n        return excludedAddresses[_address];\r\n    }\r\n\r\n    function setTaxTiersTwap(uint8 _index, uint256 _value) public onlyTaxOffice returns (bool) {\r\n        require(_index >= 0, \"Index has to be higher than 0\");\r\n        require(_index < getTaxTiersTwapsCount(), \"Index has to lower than count of tax tiers\");\r\n        if (_index > 0) {\r\n            require(_value > taxTiersTwaps[_index - 1]);\r\n        }\r\n        if (_index < getTaxTiersTwapsCount().sub(1)) {\r\n            require(_value < taxTiersTwaps[_index + 1]);\r\n        }\r\n        taxTiersTwaps[_index] = _value;\r\n        return true;\r\n    }\r\n\r\n    function setTaxTiersRate(uint8 _index, uint256 _value) public onlyTaxOffice returns (bool) {\r\n        require(_index >= 0, \"Index has to be higher than 0\");\r\n        require(_index < getTaxTiersRatesCount(), \"Index has to lower than count of tax tiers\");\r\n        taxTiersRates[_index] = _value;\r\n        return true;\r\n    }\r\n\r\n    function setBurnThreshold(uint256 _burnThreshold) public onlyTaxOffice returns (bool) {\r\n        burnThreshold = _burnThreshold;\r\n    }\r\n\r\n    function _getBombPrice() internal view returns (uint256 _bombPrice) {\r\n        try IOracle(bombOracle).consult(address(this), 1e18) returns (uint144 _price) {\r\n            return uint256(_price);\r\n        } catch {\r\n            revert(\"Bomb: failed to fetch BOMB price from Oracle\");\r\n        }\r\n    }\r\n\r\n    function _updateTaxRate(uint256 _bombPrice) internal returns (uint256) {\r\n        if (autoCalculateTax) {\r\n            for (uint8 tierId = uint8(getTaxTiersTwapsCount()).sub(1); tierId >= 0; --tierId) {\r\n                if (_bombPrice >= taxTiersTwaps[tierId]) {\r\n                    require(taxTiersRates[tierId] < 10000, \"tax equal or bigger to 100%\");\r\n                    taxRate = taxTiersRates[tierId];\r\n                    return taxTiersRates[tierId];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function enableAutoCalculateTax() public onlyTaxOffice {\r\n        autoCalculateTax = true;\r\n    }\r\n\r\n    function disableAutoCalculateTax() public onlyTaxOffice {\r\n        autoCalculateTax = false;\r\n    }\r\n\r\n    function setBombOracle(address _bombOracle) public onlyOperatorOrTaxOffice {\r\n        require(_bombOracle != address(0), \"oracle address cannot be 0 address\");\r\n        bombOracle = _bombOracle;\r\n    }\r\n\r\n    function setTaxOffice(address _taxOffice) public onlyOperatorOrTaxOffice {\r\n        require(_taxOffice != address(0), \"tax office address cannot be 0 address\");\r\n        emit TaxOfficeTransferred(taxOffice, _taxOffice);\r\n        taxOffice = _taxOffice;\r\n    }\r\n\r\n    function setTaxCollectorAddress(address _taxCollectorAddress) public onlyTaxOffice {\r\n        require(_taxCollectorAddress != address(0), \"tax collector address must be non-zero address\");\r\n        taxCollectorAddress = _taxCollectorAddress;\r\n    }\r\n\r\n    function setTaxRate(uint256 _taxRate) public onlyTaxOffice {\r\n        require(!autoCalculateTax, \"auto calculate tax cannot be enabled\");\r\n        require(_taxRate < 10000, \"tax equal or bigger to 100%\");\r\n        taxRate = _taxRate;\r\n    }\r\n\r\n    function excludeAddress(address _address) public onlyOperatorOrTaxOffice returns (bool) {\r\n        require(!excludedAddresses[_address], \"address can't be excluded\");\r\n        excludedAddresses[_address] = true;\r\n        return true;\r\n    }\r\n\r\n    function includeAddress(address _address) public onlyOperatorOrTaxOffice returns (bool) {\r\n        require(excludedAddresses[_address], \"address can't be included\");\r\n        excludedAddresses[_address] = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Operator mints BOMB to a recipient\r\n     * @param recipient_ The address of recipient\r\n     * @param amount_ The amount of BOMB to mint to\r\n     * @return whether the process has been done\r\n     */\r\n    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {\r\n        uint256 balanceBefore = balanceOf(recipient_);\r\n        _mint(recipient_, amount_);\r\n        uint256 balanceAfter = balanceOf(recipient_);\r\n\r\n        return balanceAfter > balanceBefore;\r\n    }\r\n\r\n    function burn(uint256 amount) public override {\r\n        super.burn(amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\r\n        super.burnFrom(account, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        uint256 currentTaxRate = 0;\r\n        bool burnTax = false;\r\n\r\n        if (autoCalculateTax) {\r\n            uint256 currentBombPrice = _getBombPrice();\r\n            currentTaxRate = _updateTaxRate(currentBombPrice);\r\n            if (currentBombPrice < burnThreshold) {\r\n                burnTax = true;\r\n            }\r\n        }\r\n\r\n        if (currentTaxRate == 0 || excludedAddresses[sender]) {\r\n            _transfer(sender, recipient, amount);\r\n        } else {\r\n            _transferWithTax(sender, recipient, amount, burnTax);\r\n        }\r\n\r\n        _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transferWithTax(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool burnTax\r\n    ) internal returns (bool) {\r\n        uint256 taxAmount = amount.mul(taxRate).div(10000);\r\n        uint256 amountAfterTax = amount.sub(taxAmount);\r\n\r\n        if (burnTax) {\r\n            // Burn tax\r\n            super.burnFrom(sender, taxAmount);\r\n        } else {\r\n            // Transfer tax to tax collector\r\n            _transfer(sender, taxCollectorAddress, taxAmount);\r\n        }\r\n\r\n        // Transfer amount after tax to recipient\r\n        _transfer(sender, recipient, amountAfterTax);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice distribute to reward pool (only once)\r\n     */\r\n    function distributeReward(\r\n        address _genesisPool,\r\n        address _bombPool,\r\n        address _airdropWallet\r\n    ) external onlyOperator {\r\n        require(!rewardPoolDistributed, \"only can distribute once\");\r\n        require(_genesisPool != address(0), \"!_genesisPool\");\r\n        require(_bombPool != address(0), \"!_bombPool\");\r\n        require(_airdropWallet != address(0), \"!_airdropWallet\");\r\n        rewardPoolDistributed = true;\r\n        _mint(_genesisPool, INITIAL_GENESIS_POOL_DISTRIBUTION);\r\n        _mint(_bombPool, INITIAL_BOMB_POOL_DISTRIBUTION);\r\n        _mint(_airdropWallet, INITIAL_AIRDROP_WALLET_DISTRIBUTION);\r\n    }\r\n\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/lib/SafeMath8.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath8 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        uint8 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\r\n        require(b <= a, errorMessage);\r\n        uint8 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint8 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\r\n        require(b > 0, errorMessage);\r\n        uint8 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "contracts/DummyToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\r\n\r\nimport \"./owner/Operator.sol\";\r\n\r\ncontract DummyToken is ERC20Burnable, Operator {\r\n\r\n    constructor() public ERC20(\"DummyToken\", \"DUMMY\") {}\r\n\r\n    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {\r\n        uint256 balanceBefore = balanceOf(recipient_);\r\n        _mint(recipient_, amount_);\r\n        super.burnFrom(recipient_, amount_);\r\n        uint256 balanceAfter = balanceOf(recipient_);\r\n\r\n        return balanceAfter > balanceBefore;\r\n    }\r\n\r\n    function burn(uint256 amount) public override {\r\n        super.burn(amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\r\n        super.burnFrom(account, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/BShare.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\r\n\r\nimport \"./owner/Operator.sol\";\r\n\r\n/*\r\n\r\n$$$$$$$\\   $$$$$$\\  $$\\      $$\\ $$$$$$$\\                                                            \r\n$$  __$$\\ $$  __$$\\ $$$\\    $$$ |$$  __$$\\                                                           \r\n$$ |  $$ |$$ /  $$ |$$$$\\  $$$$ |$$ |  $$ |    $$$$$$\\$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n$$$$$$$\\ |$$ |  $$ |$$\\$$\\$$ $$ |$$$$$$$\\ |    $$  _$$  _$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n$$  __$$\\ $$ |  $$ |$$ \\$$$  $$ |$$  __$$\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\r\n$$ |  $$ |$$ |  $$ |$$ |\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\r\n$$$$$$$  | $$$$$$  |$$ | \\_/ $$ |$$$$$$$  |$$\\ $$ | $$ | $$ |\\$$$$$$  |$$ |  $$ |\\$$$$$$$\\ \\$$$$$$$ |\r\n\\_______/  \\______/ \\__|     \\__|\\_______/ \\__|\\__| \\__| \\__| \\______/ \\__|  \\__| \\_______| \\____$$ |\r\n                                                                                           $$\\   $$ |\r\n                                                                                           \\$$$$$$  |\r\n    http://bomb.money                                                                      \\______/ \r\n*/\r\ncontract BShare is ERC20Burnable, Operator {\r\n    using SafeMath for uint256;\r\n\r\n    // TOTAL MAX SUPPLY = 70,000 tSHAREs\r\n    uint256 public constant FARMING_POOL_REWARD_ALLOCATION = 59500 ether;\r\n    uint256 public constant COMMUNITY_FUND_POOL_ALLOCATION = 5500 ether;\r\n    uint256 public constant DEV_FUND_POOL_ALLOCATION = 5000 ether;\r\n\r\n    uint256 public constant VESTING_DURATION = 365 days;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    uint256 public communityFundRewardRate;\r\n    uint256 public devFundRewardRate;\r\n\r\n    address public communityFund;\r\n    address public devFund;\r\n\r\n    uint256 public communityFundLastClaimed;\r\n    uint256 public devFundLastClaimed;\r\n\r\n    bool public rewardPoolDistributed = false;\r\n\r\n    constructor(uint256 _startTime, address _communityFund, address _devFund) public ERC20(\"BSHARE\", \"BSHARE\") {\r\n        _mint(msg.sender, 1 ether); // mint 1 BOMB Share for initial pools deployment\r\n\r\n        startTime = _startTime;\r\n        endTime = startTime + VESTING_DURATION;\r\n\r\n        communityFundLastClaimed = startTime;\r\n        devFundLastClaimed = startTime;\r\n\r\n        communityFundRewardRate = COMMUNITY_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\r\n        devFundRewardRate = DEV_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\r\n\r\n        require(_devFund != address(0), \"Address cannot be 0\");\r\n        devFund = _devFund;\r\n\r\n        require(_communityFund != address(0), \"Address cannot be 0\");\r\n        communityFund = _communityFund;\r\n    }\r\n\r\n    function setTreasuryFund(address _communityFund) external {\r\n        require(msg.sender == devFund, \"!dev\");\r\n        communityFund = _communityFund;\r\n    }\r\n\r\n    function setDevFund(address _devFund) external {\r\n        require(msg.sender == devFund, \"!dev\");\r\n        require(_devFund != address(0), \"zero\");\r\n        devFund = _devFund;\r\n    }\r\n\r\n    function unclaimedTreasuryFund() public view returns (uint256 _pending) {\r\n        uint256 _now = block.timestamp;\r\n        if (_now > endTime) _now = endTime;\r\n        if (communityFundLastClaimed >= _now) return 0;\r\n        _pending = _now.sub(communityFundLastClaimed).mul(communityFundRewardRate);\r\n    }\r\n\r\n    function unclaimedDevFund() public view returns (uint256 _pending) {\r\n        uint256 _now = block.timestamp;\r\n        if (_now > endTime) _now = endTime;\r\n        if (devFundLastClaimed >= _now) return 0;\r\n        _pending = _now.sub(devFundLastClaimed).mul(devFundRewardRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim pending rewards to community and dev fund\r\n     */\r\n    function claimRewards() external {\r\n        uint256 _pending = unclaimedTreasuryFund();\r\n        if (_pending > 0 && communityFund != address(0)) {\r\n            _mint(communityFund, _pending);\r\n            communityFundLastClaimed = block.timestamp;\r\n        }\r\n        _pending = unclaimedDevFund();\r\n        if (_pending > 0 && devFund != address(0)) {\r\n            _mint(devFund, _pending);\r\n            devFundLastClaimed = block.timestamp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice distribute to reward pool (only once)\r\n     */\r\n    function distributeReward(address _farmingIncentiveFund) external onlyOperator {\r\n        require(!rewardPoolDistributed, \"only can distribute once\");\r\n        require(_farmingIncentiveFund != address(0), \"!_farmingIncentiveFund\");\r\n        rewardPoolDistributed = true;\r\n        _mint(_farmingIncentiveFund, FARMING_POOL_REWARD_ALLOCATION);\r\n    }\r\n\r\n    function burn(uint256 amount) public override {\r\n        super.burn(amount);\r\n    }\r\n\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n * Copyright 2020 Compound Labs, Inc.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n * this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n * this list of conditions and the following disclaimer in the documentation\r\n * and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors\r\n * may be used to endorse or promote products derived from this software without\r\n * specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\r\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\r\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\r\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\r\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\r\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract Timelock {\r\n    using SafeMath for uint256;\r\n\r\n    event NewAdmin(address indexed newAdmin);\r\n    event NewPendingAdmin(address indexed newPendingAdmin);\r\n    event NewDelay(uint256 indexed newDelay);\r\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n\r\n    uint256 public constant GRACE_PERIOD = 14 days;\r\n    uint256 public constant MINIMUM_DELAY = 1 days;\r\n    uint256 public constant MAXIMUM_DELAY = 30 days;\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    uint256 public delay;\r\n\r\n    mapping(bytes32 => bool) public queuedTransactions;\r\n\r\n    constructor(address admin_, uint256 delay_) public {\r\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\r\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n\r\n        admin = admin_;\r\n        delay = delay_;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setDelay(uint256 delay_) public {\r\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\r\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\r\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n        delay = delay_;\r\n\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    function acceptAdmin() public {\r\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\r\n        admin = msg.sender;\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(admin);\r\n    }\r\n\r\n    function setPendingAdmin(address pendingAdmin_) public {\r\n        require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\r\n        pendingAdmin = pendingAdmin_;\r\n\r\n        emit NewPendingAdmin(pendingAdmin);\r\n    }\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public returns (bytes32) {\r\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\r\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = true;\r\n\r\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n        return txHash;\r\n    }\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public {\r\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = false;\r\n\r\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n    }\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public payable returns (bytes memory) {\r\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\r\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\r\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\r\n\r\n        queuedTransactions[txHash] = false;\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\r\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\r\n\r\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n        return returnData;\r\n    }\r\n\r\n    function getBlockTimestamp() internal view returns (uint256) {\r\n        // solium-disable-next-line security/no-block-members\r\n        return block.timestamp;\r\n    }\r\n}\r\n"
    },
    "contracts/TaxOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/*\r\n\r\n$$$$$$$\\   $$$$$$\\  $$\\      $$\\ $$$$$$$\\                                                            \r\n$$  __$$\\ $$  __$$\\ $$$\\    $$$ |$$  __$$\\                                                           \r\n$$ |  $$ |$$ /  $$ |$$$$\\  $$$$ |$$ |  $$ |    $$$$$$\\$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n$$$$$$$\\ |$$ |  $$ |$$\\$$\\$$ $$ |$$$$$$$\\ |    $$  _$$  _$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n$$  __$$\\ $$ |  $$ |$$ \\$$$  $$ |$$  __$$\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\r\n$$ |  $$ |$$ |  $$ |$$ |\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\r\n$$$$$$$  | $$$$$$  |$$ | \\_/ $$ |$$$$$$$  |$$\\ $$ | $$ | $$ |\\$$$$$$  |$$ |  $$ |\\$$$$$$$\\ \\$$$$$$$ |\r\n\\_______/  \\______/ \\__|     \\__|\\_______/ \\__|\\__| \\__| \\__| \\______/ \\__|  \\__| \\_______| \\____$$ |\r\n                                                                                           $$\\   $$ |\r\n                                                                                           \\$$$$$$  |\r\n    http://bomb.money                                                                      \\______/ \r\n*/\r\n\r\n\r\ncontract TaxOracle is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public bomb;\r\n    IERC20 public btcb;\r\n    address public pair;\r\n\r\n    constructor(\r\n        address _bomb,\r\n        address _btcb,\r\n        address _pair\r\n    ) public {\r\n        require(_bomb != address(0), \"bomb address cannot be 0\");\r\n        require(_btcb != address(0), \"btcb address cannot be 0\");\r\n        require(_pair != address(0), \"pair address cannot be 0\");\r\n        bomb = IERC20(_bomb);\r\n        btcb = IERC20(_btcb);\r\n        pair = _pair;\r\n    }\r\n\r\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut) {\r\n        require(_token == address(bomb), \"token needs to be bomb\");\r\n        uint256 bombBalance = bomb.balanceOf(pair);\r\n        uint256 btcbBalance = btcb.balanceOf(pair);\r\n        return uint144(bombBalance.mul(_amountIn).div(btcbBalance));\r\n    }\r\n\r\n    function getBombBalance() external view returns (uint256) {\r\n\treturn bomb.balanceOf(pair);\r\n    }\r\n\r\n    function getBtcbBalance() external view returns (uint256) {\r\n\treturn btcb.balanceOf(pair);\r\n    }\r\n\r\n    function getPrice() external view returns (uint256) {\r\n        uint256 bombBalance = bomb.balanceOf(pair);\r\n        uint256 btcbBalance = btcb.balanceOf(pair);\r\n        return bombBalance.mul(1e18).div(btcbBalance);\r\n    }\r\n\r\n\r\n    function setBomb(address _bomb) external onlyOwner {\r\n        require(_bomb != address(0), \"bomb address cannot be 0\");\r\n        bomb = IERC20(_bomb);\r\n    }\r\n\r\n    function setBtcb(address _btcb) external onlyOwner {\r\n        require(_btcb != address(0), \"btcb address cannot be 0\");\r\n        btcb = IERC20(_btcb);\r\n    }\r\n\r\n    function setPair(address _pair) external onlyOwner {\r\n        require(_pair != address(0), \"pair address cannot be 0\");\r\n        pair = _pair;\r\n    }\r\n\r\n\r\n\r\n}"
    },
    "contracts/SimpleERCFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\nimport \"./owner/Operator.sol\";\r\nimport \"./interfaces/ISimpleERCFund.sol\";\r\n\r\ncontract SimpleERCFund is ISimpleERCFund, Operator {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function deposit(\r\n        address token,\r\n        uint256 amount,\r\n        string memory reason\r\n    ) public override {\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n        emit Deposit(msg.sender, now, reason);\r\n    }\r\n\r\n    function withdraw(\r\n        address token,\r\n        uint256 amount,\r\n        address to,\r\n        string memory reason\r\n    ) public override onlyOperator {\r\n        IERC20(token).safeTransfer(to, amount);\r\n        emit Withdrawal(msg.sender, to, now, reason);\r\n    }\r\n\r\n    event Deposit(address indexed from, uint256 indexed at, string reason);\r\n    event Withdrawal(address indexed from, address indexed to, uint256 indexed at, string reason);\r\n}\r\n"
    },
    "contracts/interfaces/ISimpleERCFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ISimpleERCFund {\r\n    function deposit(\r\n        address token,\r\n        uint256 amount,\r\n        string memory reason\r\n    ) external;\r\n\r\n    function withdraw(\r\n        address token,\r\n        uint256 amount,\r\n        address to,\r\n        string memory reason\r\n    ) external;\r\n}\r\n"
    },
    "contracts/distribution/BShareRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// Note that this pool has no minter key of tSHARE (rewards).\r\n// Instead, the governance will call tSHARE distributeReward method and send reward to this pool at the beginning.\r\ncontract BShareRewardPool {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // governance\r\n    address public operator;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 token; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. tSHAREs to distribute per block.\r\n        uint256 lastRewardTime; // Last time that tSHAREs distribution occurs.\r\n        uint256 accBSharePerShare; // Accumulated tSHAREs per share, times 1e18. See below.\r\n        bool isStarted; // if lastRewardTime has passed\r\n    }\r\n\r\n    IERC20 public bshare;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n\r\n    // The time when tSHARE mining starts.\r\n    uint256 public poolStartTime;\r\n\r\n    // The time when tSHARE mining ends.\r\n    uint256 public poolEndTime;\r\n\r\n    uint256 public tSharePerSecond = 0.00186122 ether; // 59500 bshare / (370 days * 24h * 60min * 60s)\r\n    uint256 public runningTime = 370 days; // 370 days\r\n    uint256 public constant TOTAL_REWARDS = 59500 ether;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 amount);\r\n\r\n    constructor(\r\n        address _bshare,\r\n        uint256 _poolStartTime\r\n    ) public {\r\n        require(block.timestamp < _poolStartTime, \"late\");\r\n        if (_bshare != address(0)) bshare = IERC20(_bshare);\r\n        poolStartTime = _poolStartTime;\r\n        poolEndTime = poolStartTime + runningTime;\r\n        operator = msg.sender;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"BShareRewardPool: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    function checkPoolDuplicate(IERC20 _token) internal view {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            require(poolInfo[pid].token != _token, \"BShareRewardPool: existing pool?\");\r\n        }\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _token,\r\n        bool _withUpdate,\r\n        uint256 _lastRewardTime\r\n    ) public onlyOperator {\r\n        checkPoolDuplicate(_token);\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        if (block.timestamp < poolStartTime) {\r\n            // chef is sleeping\r\n            if (_lastRewardTime == 0) {\r\n                _lastRewardTime = poolStartTime;\r\n            } else {\r\n                if (_lastRewardTime < poolStartTime) {\r\n                    _lastRewardTime = poolStartTime;\r\n                }\r\n            }\r\n        } else {\r\n            // chef is cooking\r\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\r\n                _lastRewardTime = block.timestamp;\r\n            }\r\n        }\r\n        bool _isStarted =\r\n        (_lastRewardTime <= poolStartTime) ||\r\n        (_lastRewardTime <= block.timestamp);\r\n        poolInfo.push(PoolInfo({\r\n            token : _token,\r\n            allocPoint : _allocPoint,\r\n            lastRewardTime : _lastRewardTime,\r\n            accBSharePerShare : 0,\r\n            isStarted : _isStarted\r\n            }));\r\n        if (_isStarted) {\r\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        }\r\n    }\r\n\r\n    // Update the given pool's tSHARE allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\r\n        massUpdatePools();\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (pool.isStarted) {\r\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(\r\n                _allocPoint\r\n            );\r\n        }\r\n        pool.allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Return accumulate rewards over the given _from to _to block.\r\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\r\n        if (_fromTime >= _toTime) return 0;\r\n        if (_toTime >= poolEndTime) {\r\n            if (_fromTime >= poolEndTime) return 0;\r\n            if (_fromTime <= poolStartTime) return poolEndTime.sub(poolStartTime).mul(tSharePerSecond);\r\n            return poolEndTime.sub(_fromTime).mul(tSharePerSecond);\r\n        } else {\r\n            if (_toTime <= poolStartTime) return 0;\r\n            if (_fromTime <= poolStartTime) return _toTime.sub(poolStartTime).mul(tSharePerSecond);\r\n            return _toTime.sub(_fromTime).mul(tSharePerSecond);\r\n        }\r\n    }\r\n\r\n    // View function to see pending tSHAREs on frontend.\r\n    function pendingShare(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accBSharePerShare = pool.accBSharePerShare;\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\r\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\r\n            uint256 _bshareReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\r\n            accBSharePerShare = accBSharePerShare.add(_bshareReward.mul(1e18).div(tokenSupply));\r\n        }\r\n        return user.amount.mul(accBSharePerShare).div(1e18).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.lastRewardTime) {\r\n            return;\r\n        }\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        if (tokenSupply == 0) {\r\n            pool.lastRewardTime = block.timestamp;\r\n            return;\r\n        }\r\n        if (!pool.isStarted) {\r\n            pool.isStarted = true;\r\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\r\n        }\r\n        if (totalAllocPoint > 0) {\r\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\r\n            uint256 _bshareReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\r\n            pool.accBSharePerShare = pool.accBSharePerShare.add(_bshareReward.mul(1e18).div(tokenSupply));\r\n        }\r\n        pool.lastRewardTime = block.timestamp;\r\n    }\r\n\r\n    // Deposit LP tokens.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        address _sender = msg.sender;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 _pending = user.amount.mul(pool.accBSharePerShare).div(1e18).sub(user.rewardDebt);\r\n            if (_pending > 0) {\r\n                safeBShareTransfer(_sender, _pending);\r\n                emit RewardPaid(_sender, _pending);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accBSharePerShare).div(1e18);\r\n        emit Deposit(_sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        address _sender = msg.sender;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 _pending = user.amount.mul(pool.accBSharePerShare).div(1e18).sub(user.rewardDebt);\r\n        if (_pending > 0) {\r\n            safeBShareTransfer(_sender, _pending);\r\n            emit RewardPaid(_sender, _pending);\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.token.safeTransfer(_sender, _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accBSharePerShare).div(1e18);\r\n        emit Withdraw(_sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 _amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.token.safeTransfer(msg.sender, _amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Safe bshare transfer function, just in case if rounding error causes pool to not have enough tSHAREs.\r\n    function safeBShareTransfer(address _to, uint256 _amount) internal {\r\n        uint256 _bshareBal = bshare.balanceOf(address(this));\r\n        if (_bshareBal > 0) {\r\n            if (_amount > _bshareBal) {\r\n                bshare.safeTransfer(_to, _bshareBal);\r\n            } else {\r\n                bshare.safeTransfer(_to, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external onlyOperator {\r\n        if (block.timestamp < poolEndTime + 90 days) {\r\n            // do not allow to drain core token (tSHARE or lps) if less than 90 days after pool ends\r\n            require(_token != bshare, \"bshare\");\r\n            uint256 length = poolInfo.length;\r\n            for (uint256 pid = 0; pid < length; ++pid) {\r\n                PoolInfo storage pool = poolInfo[pid];\r\n                require(_token != pool.token, \"pool.token\");\r\n            }\r\n        }\r\n        _token.safeTransfer(to, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/distribution/BombRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// Note that this pool has no minter key of BOMB (rewards).\r\n// Instead, the governance will call BOMB distributeReward method and send reward to this pool at the beginning.\r\ncontract BombRewardPool {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // governance\r\n    address public operator;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 token; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. BOMBs to distribute in the pool.\r\n        uint256 lastRewardTime; // Last time that BOMBs distribution occurred.\r\n        uint256 accBombPerShare; // Accumulated BOMBs per share, times 1e18. See below.\r\n        bool isStarted; // if lastRewardTime has passed\r\n    }\r\n\r\n    IERC20 public bomb;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n\r\n    // The time when BOMB mining starts.\r\n    uint256 public poolStartTime;\r\n\r\n    uint256[] public epochTotalRewards = [80000 ether, 60000 ether];\r\n\r\n    // Time when each epoch ends.\r\n    uint256[3] public epochEndTimes;\r\n\r\n    // Reward per second for each of 2 epochs (last item is equal to 0 - for sanity).\r\n    uint256[3] public epochBombPerSecond;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 amount);\r\n\r\n    constructor(address _bomb, uint256 _poolStartTime) public {\r\n        require(block.timestamp < _poolStartTime, \"late\");\r\n        if (_bomb != address(0)) bomb = IERC20(_bomb);\r\n\r\n        poolStartTime = _poolStartTime;\r\n\r\n        epochEndTimes[0] = poolStartTime + 4 days; // Day 2-5\r\n        epochEndTimes[1] = epochEndTimes[0] + 5 days; // Day 6-10\r\n\r\n        epochBombPerSecond[0] = epochTotalRewards[0].div(4 days);\r\n        epochBombPerSecond[1] = epochTotalRewards[1].div(5 days);\r\n\r\n        epochBombPerSecond[2] = 0;\r\n        operator = msg.sender;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"BombRewardPool: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    function checkPoolDuplicate(IERC20 _token) internal view {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            require(poolInfo[pid].token != _token, \"BombRewardPool: existing pool?\");\r\n        }\r\n    }\r\n\r\n    // Add a new token to the pool. Can only be called by the owner.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _token,\r\n        bool _withUpdate,\r\n        uint256 _lastRewardTime\r\n    ) public onlyOperator {\r\n        checkPoolDuplicate(_token);\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        if (block.timestamp < poolStartTime) {\r\n            // chef is sleeping\r\n            if (_lastRewardTime == 0) {\r\n                _lastRewardTime = poolStartTime;\r\n            } else {\r\n                if (_lastRewardTime < poolStartTime) {\r\n                    _lastRewardTime = poolStartTime;\r\n                }\r\n            }\r\n        } else {\r\n            // chef is cooking\r\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\r\n                _lastRewardTime = block.timestamp;\r\n            }\r\n        }\r\n        bool _isStarted = (_lastRewardTime <= poolStartTime) || (_lastRewardTime <= block.timestamp);\r\n        poolInfo.push(PoolInfo({token: _token, allocPoint: _allocPoint, lastRewardTime: _lastRewardTime, accBombPerShare: 0, isStarted: _isStarted}));\r\n        if (_isStarted) {\r\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        }\r\n    }\r\n\r\n    // Update the given pool's BOMB allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\r\n        massUpdatePools();\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (pool.isStarted) {\r\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(_allocPoint);\r\n        }\r\n        pool.allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Return accumulate rewards over the given _fromTime to _toTime.\r\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\r\n        for (uint8 epochId = 2; epochId >= 1; --epochId) {\r\n            if (_toTime >= epochEndTimes[epochId - 1]) {\r\n                if (_fromTime >= epochEndTimes[epochId - 1]) {\r\n                    return _toTime.sub(_fromTime).mul(epochBombPerSecond[epochId]);\r\n                }\r\n\r\n                uint256 _generatedReward = _toTime.sub(epochEndTimes[epochId - 1]).mul(epochBombPerSecond[epochId]);\r\n                if (epochId == 1) {\r\n                    return _generatedReward.add(epochEndTimes[0].sub(_fromTime).mul(epochBombPerSecond[0]));\r\n                }\r\n                for (epochId = epochId - 1; epochId >= 1; --epochId) {\r\n                    if (_fromTime >= epochEndTimes[epochId - 1]) {\r\n                        return _generatedReward.add(epochEndTimes[epochId].sub(_fromTime).mul(epochBombPerSecond[epochId]));\r\n                    }\r\n                    _generatedReward = _generatedReward.add(epochEndTimes[epochId].sub(epochEndTimes[epochId - 1]).mul(epochBombPerSecond[epochId]));\r\n                }\r\n                return _generatedReward.add(epochEndTimes[0].sub(_fromTime).mul(epochBombPerSecond[0]));\r\n            }\r\n        }\r\n        return _toTime.sub(_fromTime).mul(epochBombPerSecond[0]);\r\n    }\r\n\r\n    // View function to see pending BOMBs on frontend.\r\n    function pendingBOMB(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accBombPerShare = pool.accBombPerShare;\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\r\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\r\n            uint256 _bombReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\r\n            accBombPerShare = accBombPerShare.add(_bombReward.mul(1e18).div(tokenSupply));\r\n        }\r\n        return user.amount.mul(accBombPerShare).div(1e18).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.lastRewardTime) {\r\n            return;\r\n        }\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        if (tokenSupply == 0) {\r\n            pool.lastRewardTime = block.timestamp;\r\n            return;\r\n        }\r\n        if (!pool.isStarted) {\r\n            pool.isStarted = true;\r\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\r\n        }\r\n        if (totalAllocPoint > 0) {\r\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\r\n            uint256 _bombReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\r\n            pool.accBombPerShare = pool.accBombPerShare.add(_bombReward.mul(1e18).div(tokenSupply));\r\n        }\r\n        pool.lastRewardTime = block.timestamp;\r\n    }\r\n\r\n    // Deposit LP tokens.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        address _sender = msg.sender;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 _pending = user.amount.mul(pool.accBombPerShare).div(1e18).sub(user.rewardDebt);\r\n            if (_pending > 0) {\r\n                safeBombTransfer(_sender, _pending);\r\n                emit RewardPaid(_sender, _pending);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accBombPerShare).div(1e18);\r\n        emit Deposit(_sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        address _sender = msg.sender;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 _pending = user.amount.mul(pool.accBombPerShare).div(1e18).sub(user.rewardDebt);\r\n        if (_pending > 0) {\r\n            safeBombTransfer(_sender, _pending);\r\n            emit RewardPaid(_sender, _pending);\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.token.safeTransfer(_sender, _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accBombPerShare).div(1e18);\r\n        emit Withdraw(_sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 _amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.token.safeTransfer(msg.sender, _amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Safe bomb transfer function, just in case if rounding error causes pool to not have enough BOMBs.\r\n    function safeBombTransfer(address _to, uint256 _amount) internal {\r\n        uint256 _bombBal = bomb.balanceOf(address(this));\r\n        if (_bombBal > 0) {\r\n            if (_amount > _bombBal) {\r\n                bomb.safeTransfer(_to, _bombBal);\r\n            } else {\r\n                bomb.safeTransfer(_to, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 amount,\r\n        address to\r\n    ) external onlyOperator {\r\n        if (block.timestamp < epochEndTimes[1] + 30 days) {\r\n            // do not allow to drain token if less than 30 days after farming\r\n            require(_token != bomb, \"!bomb\");\r\n            uint256 length = poolInfo.length;\r\n            for (uint256 pid = 0; pid < length; ++pid) {\r\n                PoolInfo storage pool = poolInfo[pid];\r\n                require(_token != pool.token, \"!pool.token\");\r\n            }\r\n        }\r\n        _token.safeTransfer(to, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/distribution/BombGenesisRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// Note that this pool has no minter key of BOMB (rewards).\r\n// Instead, the governance will call BOMB distributeReward method and send reward to this pool at the beginning.\r\ncontract BombGenesisRewardPool {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // governance\r\n    address public operator;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 token; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. BOMB to distribute.\r\n        uint256 lastRewardTime; // Last time that BOMB distribution occurs.\r\n        uint256 accBombPerShare; // Accumulated BOMB per share, times 1e18. See below.\r\n        bool isStarted; // if lastRewardBlock has passed\r\n    }\r\n\r\n    IERC20 public bomb;\r\n    address public cake;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n\r\n    // The time when BOMB mining starts.\r\n    uint256 public poolStartTime;\r\n\r\n    // The time when BOMB mining ends.\r\n    uint256 public poolEndTime;\r\n\r\n    // TESTNET\r\n    // uint256 public bombPerSecond = 3.0555555 ether; // 11000 BOMB / (1h * 60min * 60s)\r\n    // uint256 public runningTime = 24 hours; // 1 hours\r\n    // uint256 public constant TOTAL_REWARDS = 11000 ether;\r\n    // END TESTNET\r\n\r\n    // MAINNET\r\n    uint256 public bombPerSecond = 0.11574 ether; // 10000 BOMB / (24h * 60min * 60s)\r\n    uint256 public runningTime = 1 days; // 1 days\r\n    uint256 public constant TOTAL_REWARDS = 10000 ether;\r\n    // END MAINNET\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 amount);\r\n\r\n    constructor(\r\n        address _bomb,\r\n        address _cake,\r\n        uint256 _poolStartTime\r\n    ) public {\r\n        require(block.timestamp < _poolStartTime, \"late\");\r\n        if (_bomb != address(0)) bomb = IERC20(_bomb);\r\n        if (_cake != address(0)) cake = _cake;\r\n        poolStartTime = _poolStartTime;\r\n        poolEndTime = poolStartTime + runningTime;\r\n        operator = msg.sender;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"BombGenesisPool: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    function checkPoolDuplicate(IERC20 _token) internal view {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            require(poolInfo[pid].token != _token, \"BombGenesisPool: existing pool?\");\r\n        }\r\n    }\r\n\r\n    // Add a new token to the pool. Can only be called by the owner.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _token,\r\n        bool _withUpdate,\r\n        uint256 _lastRewardTime\r\n    ) public onlyOperator {\r\n        checkPoolDuplicate(_token);\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        if (block.timestamp < poolStartTime) {\r\n            // chef is sleeping\r\n            if (_lastRewardTime == 0) {\r\n                _lastRewardTime = poolStartTime;\r\n            } else {\r\n                if (_lastRewardTime < poolStartTime) {\r\n                    _lastRewardTime = poolStartTime;\r\n                }\r\n            }\r\n        } else {\r\n            // chef is cooking\r\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\r\n                _lastRewardTime = block.timestamp;\r\n            }\r\n        }\r\n        bool _isStarted = (_lastRewardTime <= poolStartTime) || (_lastRewardTime <= block.timestamp);\r\n        poolInfo.push(PoolInfo({token: _token, allocPoint: _allocPoint, lastRewardTime: _lastRewardTime, accBombPerShare: 0, isStarted: _isStarted}));\r\n        if (_isStarted) {\r\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        }\r\n    }\r\n\r\n    // Update the given pool's BOMB allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\r\n        massUpdatePools();\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (pool.isStarted) {\r\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(_allocPoint);\r\n        }\r\n        pool.allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Return accumulate rewards over the given _from to _to block.\r\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\r\n        if (_fromTime >= _toTime) return 0;\r\n        if (_toTime >= poolEndTime) {\r\n            if (_fromTime >= poolEndTime) return 0;\r\n            if (_fromTime <= poolStartTime) return poolEndTime.sub(poolStartTime).mul(bombPerSecond);\r\n            return poolEndTime.sub(_fromTime).mul(bombPerSecond);\r\n        } else {\r\n            if (_toTime <= poolStartTime) return 0;\r\n            if (_fromTime <= poolStartTime) return _toTime.sub(poolStartTime).mul(bombPerSecond);\r\n            return _toTime.sub(_fromTime).mul(bombPerSecond);\r\n        }\r\n    }\r\n\r\n    // View function to see pending BOMB on frontend.\r\n    function pendingBOMB(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accBombPerShare = pool.accBombPerShare;\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\r\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\r\n            uint256 _bombReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\r\n            accBombPerShare = accBombPerShare.add(_bombReward.mul(1e18).div(tokenSupply));\r\n        }\r\n        return user.amount.mul(accBombPerShare).div(1e18).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.lastRewardTime) {\r\n            return;\r\n        }\r\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\r\n        if (tokenSupply == 0) {\r\n            pool.lastRewardTime = block.timestamp;\r\n            return;\r\n        }\r\n        if (!pool.isStarted) {\r\n            pool.isStarted = true;\r\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\r\n        }\r\n        if (totalAllocPoint > 0) {\r\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\r\n            uint256 _bombReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\r\n            pool.accBombPerShare = pool.accBombPerShare.add(_bombReward.mul(1e18).div(tokenSupply));\r\n        }\r\n        pool.lastRewardTime = block.timestamp;\r\n    }\r\n\r\n    // Deposit LP tokens.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        address _sender = msg.sender;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 _pending = user.amount.mul(pool.accBombPerShare).div(1e18).sub(user.rewardDebt);\r\n            if (_pending > 0) {\r\n                safeBombTransfer(_sender, _pending);\r\n                emit RewardPaid(_sender, _pending);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\r\n            if (address(pool.token) == cake) {\r\n                user.amount = user.amount.add(_amount.mul(9900).div(10000));\r\n            } else {\r\n                user.amount = user.amount.add(_amount);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accBombPerShare).div(1e18);\r\n        emit Deposit(_sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        address _sender = msg.sender;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 _pending = user.amount.mul(pool.accBombPerShare).div(1e18).sub(user.rewardDebt);\r\n        if (_pending > 0) {\r\n            safeBombTransfer(_sender, _pending);\r\n            emit RewardPaid(_sender, _pending);\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.token.safeTransfer(_sender, _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accBombPerShare).div(1e18);\r\n        emit Withdraw(_sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 _amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.token.safeTransfer(msg.sender, _amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Safe BOMB transfer function, just in case if rounding error causes pool to not have enough BOMBs.\r\n    function safeBombTransfer(address _to, uint256 _amount) internal {\r\n        uint256 _bombBalance = bomb.balanceOf(address(this));\r\n        if (_bombBalance > 0) {\r\n            if (_amount > _bombBalance) {\r\n                bomb.safeTransfer(_to, _bombBalance);\r\n            } else {\r\n                bomb.safeTransfer(_to, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 amount,\r\n        address to\r\n    ) external onlyOperator {\r\n        if (block.timestamp < poolEndTime + 90 days) {\r\n            // do not allow to drain core token (BOMB or lps) if less than 90 days after pool ends\r\n            require(_token != bomb, \"bomb\");\r\n            uint256 length = poolInfo.length;\r\n            for (uint256 pid = 0; pid < length; ++pid) {\r\n                PoolInfo storage pool = poolInfo[pid];\r\n                require(_token != pool.token, \"pool.token\");\r\n            }\r\n        }\r\n        _token.safeTransfer(to, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/Boardroom.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\nimport \"./utils/ContractGuard.sol\";\r\nimport \"./interfaces/IBasisAsset.sol\";\r\nimport \"./interfaces/ITreasury.sol\";\r\n\r\ncontract ShareWrapper {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public share;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function stake(uint256 amount) public virtual {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        share.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public virtual {\r\n        uint256 memberShare = _balances[msg.sender];\r\n        require(memberShare >= amount, \"Boardroom: withdraw request greater than staked amount\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = memberShare.sub(amount);\r\n        share.safeTransfer(msg.sender, amount);\r\n    }\r\n}\r\n\r\n/*\r\n\r\n$$$$$$$\\   $$$$$$\\  $$\\      $$\\ $$$$$$$\\                                                            \r\n$$  __$$\\ $$  __$$\\ $$$\\    $$$ |$$  __$$\\                                                           \r\n$$ |  $$ |$$ /  $$ |$$$$\\  $$$$ |$$ |  $$ |    $$$$$$\\$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n$$$$$$$\\ |$$ |  $$ |$$\\$$\\$$ $$ |$$$$$$$\\ |    $$  _$$  _$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n$$  __$$\\ $$ |  $$ |$$ \\$$$  $$ |$$  __$$\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\r\n$$ |  $$ |$$ |  $$ |$$ |\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\r\n$$$$$$$  | $$$$$$  |$$ | \\_/ $$ |$$$$$$$  |$$\\ $$ | $$ | $$ |\\$$$$$$  |$$ |  $$ |\\$$$$$$$\\ \\$$$$$$$ |\r\n\\_______/  \\______/ \\__|     \\__|\\_______/ \\__|\\__| \\__| \\__| \\______/ \\__|  \\__| \\_______| \\____$$ |\r\n                                                                                           $$\\   $$ |\r\n                                                                                           \\$$$$$$  |\r\n    http://bomb.money                                                                      \\______/ \r\n*/\r\ncontract Boardroom is ShareWrapper, ContractGuard {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== DATA STRUCTURES ========== */\r\n\r\n    struct Memberseat {\r\n        uint256 lastSnapshotIndex;\r\n        uint256 rewardEarned;\r\n        uint256 epochTimerStart;\r\n    }\r\n\r\n    struct BoardroomSnapshot {\r\n        uint256 time;\r\n        uint256 rewardReceived;\r\n        uint256 rewardPerShare;\r\n    }\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // governance\r\n    address public operator;\r\n\r\n    // flags\r\n    bool public initialized = false;\r\n\r\n    IERC20 public bomb;\r\n    ITreasury public treasury;\r\n\r\n    mapping(address => Memberseat) public members;\r\n    BoardroomSnapshot[] public boardroomHistory;\r\n\r\n    uint256 public withdrawLockupEpochs;\r\n    uint256 public rewardLockupEpochs;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event Initialized(address indexed executor, uint256 at);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event RewardAdded(address indexed user, uint256 reward);\r\n\r\n    /* ========== Modifiers =============== */\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"Boardroom: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    modifier memberExists() {\r\n        require(balanceOf(msg.sender) > 0, \"Boardroom: The member does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier updateReward(address member) {\r\n        if (member != address(0)) {\r\n            Memberseat memory seat = members[member];\r\n            seat.rewardEarned = earned(member);\r\n            seat.lastSnapshotIndex = latestSnapshotIndex();\r\n            members[member] = seat;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier notInitialized() {\r\n        require(!initialized, \"Boardroom: already initialized\");\r\n        _;\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function initialize(\r\n        IERC20 _bomb,\r\n        IERC20 _share,\r\n        ITreasury _treasury\r\n    ) public notInitialized {\r\n        bomb = _bomb;\r\n        share = _share;\r\n        treasury = _treasury;\r\n\r\n        BoardroomSnapshot memory genesisSnapshot = BoardroomSnapshot({time: block.number, rewardReceived: 0, rewardPerShare: 0});\r\n        boardroomHistory.push(genesisSnapshot);\r\n\r\n        withdrawLockupEpochs = 6; // Lock for 6 epochs (36h) before release withdraw\r\n        rewardLockupEpochs = 3; // Lock for 3 epochs (18h) before release claimReward\r\n\r\n        initialized = true;\r\n        operator = msg.sender;\r\n        emit Initialized(msg.sender, block.number);\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\r\n        require(_withdrawLockupEpochs >= _rewardLockupEpochs && _withdrawLockupEpochs <= 56, \"_withdrawLockupEpochs: out of range\"); // <= 2 week\r\n        withdrawLockupEpochs = _withdrawLockupEpochs;\r\n        rewardLockupEpochs = _rewardLockupEpochs;\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    // =========== Snapshot getters\r\n\r\n    function latestSnapshotIndex() public view returns (uint256) {\r\n        return boardroomHistory.length.sub(1);\r\n    }\r\n\r\n    function getLatestSnapshot() internal view returns (BoardroomSnapshot memory) {\r\n        return boardroomHistory[latestSnapshotIndex()];\r\n    }\r\n\r\n    function getLastSnapshotIndexOf(address member) public view returns (uint256) {\r\n        return members[member].lastSnapshotIndex;\r\n    }\r\n\r\n    function getLastSnapshotOf(address member) internal view returns (BoardroomSnapshot memory) {\r\n        return boardroomHistory[getLastSnapshotIndexOf(member)];\r\n    }\r\n\r\n    function canWithdraw(address member) external view returns (bool) {\r\n        return members[member].epochTimerStart.add(withdrawLockupEpochs) <= treasury.epoch();\r\n    }\r\n\r\n    function canClaimReward(address member) external view returns (bool) {\r\n        return members[member].epochTimerStart.add(rewardLockupEpochs) <= treasury.epoch();\r\n    }\r\n\r\n    function epoch() external view returns (uint256) {\r\n        return treasury.epoch();\r\n    }\r\n\r\n    function nextEpochPoint() external view returns (uint256) {\r\n        return treasury.nextEpochPoint();\r\n    }\r\n\r\n    function getBombPrice() external view returns (uint256) {\r\n        return treasury.getBombPrice();\r\n    }\r\n\r\n    // =========== Member getters\r\n\r\n    function rewardPerShare() public view returns (uint256) {\r\n        return getLatestSnapshot().rewardPerShare;\r\n    }\r\n\r\n    function earned(address member) public view returns (uint256) {\r\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\r\n        uint256 storedRPS = getLastSnapshotOf(member).rewardPerShare;\r\n\r\n        return balanceOf(member).mul(latestRPS.sub(storedRPS)).div(1e18).add(members[member].rewardEarned);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function stake(uint256 amount) public override onlyOneBlock updateReward(msg.sender) {\r\n        require(amount > 0, \"Boardroom: Cannot stake 0\");\r\n        super.stake(amount);\r\n        members[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public override onlyOneBlock memberExists updateReward(msg.sender) {\r\n        require(amount > 0, \"Boardroom: Cannot withdraw 0\");\r\n        require(members[msg.sender].epochTimerStart.add(withdrawLockupEpochs) <= treasury.epoch(), \"Boardroom: still in withdraw lockup\");\r\n        claimReward();\r\n        super.withdraw(amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function exit() external {\r\n        withdraw(balanceOf(msg.sender));\r\n    }\r\n\r\n    function claimReward() public updateReward(msg.sender) {\r\n        uint256 reward = members[msg.sender].rewardEarned;\r\n        if (reward > 0) {\r\n            require(members[msg.sender].epochTimerStart.add(rewardLockupEpochs) <= treasury.epoch(), \"Boardroom: still in reward lockup\");\r\n            members[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\r\n            members[msg.sender].rewardEarned = 0;\r\n            bomb.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function allocateSeigniorage(uint256 amount) external onlyOneBlock onlyOperator {\r\n        require(amount > 0, \"Boardroom: Cannot allocate 0\");\r\n        require(totalSupply() > 0, \"Boardroom: Cannot allocate when totalSupply is 0\");\r\n\r\n        // Create & add new snapshot\r\n        uint256 prevRPS = getLatestSnapshot().rewardPerShare;\r\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(totalSupply()));\r\n\r\n        BoardroomSnapshot memory newSnapshot = BoardroomSnapshot({time: block.number, rewardReceived: amount, rewardPerShare: nextRPS});\r\n        boardroomHistory.push(newSnapshot);\r\n\r\n        bomb.safeTransferFrom(msg.sender, address(this), amount);\r\n        emit RewardAdded(msg.sender, amount);\r\n    }\r\n\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        // do not allow to drain core tokens\r\n        require(address(_token) != address(bomb), \"bomb\");\r\n        require(address(_token) != address(share), \"share\");\r\n        _token.safeTransfer(_to, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ITreasury {\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function getBombPrice() external view returns (uint256);\r\n\r\n    function buyBonds(uint256 amount, uint256 targetPrice) external;\r\n\r\n    function redeemBonds(uint256 amount, uint256 targetPrice) external;\r\n}\r\n"
    },
    "contracts/interfaces/IWrappedEth.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IWrappedEth is IERC20 {\r\n    function deposit() external payable returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external returns (uint256);\r\n\r\n}\r\n\r\n"
    },
    "contracts/TaxOfficeV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"./owner/Operator.sol\";\r\nimport \"./interfaces/ITaxable.sol\";\r\nimport \"./interfaces/IUniswapV2Router.sol\";\r\nimport \"./interfaces/IERC20.sol\";\r\n\r\n/*\r\n\r\n$$$$$$$\\   $$$$$$\\  $$\\      $$\\ $$$$$$$\\                                                            \r\n$$  __$$\\ $$  __$$\\ $$$\\    $$$ |$$  __$$\\                                                           \r\n$$ |  $$ |$$ /  $$ |$$$$\\  $$$$ |$$ |  $$ |    $$$$$$\\$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n$$$$$$$\\ |$$ |  $$ |$$\\$$\\$$ $$ |$$$$$$$\\ |    $$  _$$  _$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n$$  __$$\\ $$ |  $$ |$$ \\$$$  $$ |$$  __$$\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\r\n$$ |  $$ |$$ |  $$ |$$ |\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\r\n$$$$$$$  | $$$$$$  |$$ | \\_/ $$ |$$$$$$$  |$$\\ $$ | $$ | $$ |\\$$$$$$  |$$ |  $$ |\\$$$$$$$\\ \\$$$$$$$ |\r\n\\_______/  \\______/ \\__|     \\__|\\_______/ \\__|\\__| \\__| \\__| \\______/ \\__|  \\__| \\_______| \\____$$ |\r\n                                                                                           $$\\   $$ |\r\n                                                                                           \\$$$$$$  |\r\n    http://bomb.money                                                                      \\______/ \r\n*/\r\ncontract TaxOfficeV2 is Operator {\r\n    using SafeMath for uint256;\r\n\r\n    address public bomb = address(0x522348779DCb2911539e76A1042aA922F9C47Ee3);\r\n    address public weth = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n    address public uniRouter = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    mapping(address => bool) public taxExclusionEnabled;\r\n\r\n    function setTaxTiersTwap(uint8 _index, uint256 _value) public onlyOperator returns (bool) {\r\n        return ITaxable(bomb).setTaxTiersTwap(_index, _value);\r\n    }\r\n\r\n    function setTaxTiersRate(uint8 _index, uint256 _value) public onlyOperator returns (bool) {\r\n        return ITaxable(bomb).setTaxTiersRate(_index, _value);\r\n    }\r\n\r\n    function enableAutoCalculateTax() public onlyOperator {\r\n        ITaxable(bomb).enableAutoCalculateTax();\r\n    }\r\n\r\n    function disableAutoCalculateTax() public onlyOperator {\r\n        ITaxable(bomb).disableAutoCalculateTax();\r\n    }\r\n\r\n    function setTaxRate(uint256 _taxRate) public onlyOperator {\r\n        ITaxable(bomb).setTaxRate(_taxRate);\r\n    }\r\n\r\n    function setBurnThreshold(uint256 _burnThreshold) public onlyOperator {\r\n        ITaxable(bomb).setBurnThreshold(_burnThreshold);\r\n    }\r\n\r\n    function setTaxCollectorAddress(address _taxCollectorAddress) public onlyOperator {\r\n        ITaxable(bomb).setTaxCollectorAddress(_taxCollectorAddress);\r\n    }\r\n\r\n    function excludeAddressFromTax(address _address) external onlyOperator returns (bool) {\r\n        return _excludeAddressFromTax(_address);\r\n    }\r\n\r\n    function _excludeAddressFromTax(address _address) private returns (bool) {\r\n        if (!ITaxable(bomb).isAddressExcluded(_address)) {\r\n            return ITaxable(bomb).excludeAddress(_address);\r\n        }\r\n    }\r\n\r\n    function includeAddressInTax(address _address) external onlyOperator returns (bool) {\r\n        return _includeAddressInTax(_address);\r\n    }\r\n\r\n    function _includeAddressInTax(address _address) private returns (bool) {\r\n        if (ITaxable(bomb).isAddressExcluded(_address)) {\r\n            return ITaxable(bomb).includeAddress(_address);\r\n        }\r\n    }\r\n\r\n    function taxRate() external returns (uint256) {\r\n        return ITaxable(bomb).taxRate();\r\n    }\r\n\r\n    function addLiquidityTaxFree(\r\n        address token,\r\n        uint256 amtBomb,\r\n        uint256 amtToken,\r\n        uint256 amtBombMin,\r\n        uint256 amtTokenMin\r\n    )\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        require(amtBomb != 0 && amtToken != 0, \"amounts can't be 0\");\r\n        _excludeAddressFromTax(msg.sender);\r\n\r\n        IERC20(bomb).transferFrom(msg.sender, address(this), amtBomb);\r\n        IERC20(token).transferFrom(msg.sender, address(this), amtToken);\r\n        _approveTokenIfNeeded(bomb, uniRouter);\r\n        _approveTokenIfNeeded(token, uniRouter);\r\n\r\n        _includeAddressInTax(msg.sender);\r\n\r\n        uint256 resultAmtBomb;\r\n        uint256 resultAmtToken;\r\n        uint256 liquidity;\r\n        (resultAmtBomb, resultAmtToken, liquidity) = IUniswapV2Router(uniRouter).addLiquidity(\r\n            bomb,\r\n            token,\r\n            amtBomb,\r\n            amtToken,\r\n            amtBombMin,\r\n            amtTokenMin,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n\r\n        if (amtBomb.sub(resultAmtBomb) > 0) {\r\n            IERC20(bomb).transfer(msg.sender, amtBomb.sub(resultAmtBomb));\r\n        }\r\n        if (amtToken.sub(resultAmtToken) > 0) {\r\n            IERC20(token).transfer(msg.sender, amtToken.sub(resultAmtToken));\r\n        }\r\n        return (resultAmtBomb, resultAmtToken, liquidity);\r\n    }\r\n\r\n    function addLiquidityETHTaxFree(\r\n        uint256 amtBomb,\r\n        uint256 amtBombMin,\r\n        uint256 amtEthMin\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        require(amtBomb != 0 && msg.value != 0, \"amounts can't be 0\");\r\n        _excludeAddressFromTax(msg.sender);\r\n\r\n        IERC20(bomb).transferFrom(msg.sender, address(this), amtBomb);\r\n        _approveTokenIfNeeded(bomb, uniRouter);\r\n\r\n        _includeAddressInTax(msg.sender);\r\n\r\n        uint256 resultAmtBomb;\r\n        uint256 resultAmtEth;\r\n        uint256 liquidity;\r\n        (resultAmtBomb, resultAmtEth, liquidity) = IUniswapV2Router(uniRouter).addLiquidityETH{value: msg.value}(\r\n            bomb,\r\n            amtBomb,\r\n            amtBombMin,\r\n            amtEthMin,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n\r\n        if (amtBomb.sub(resultAmtBomb) > 0) {\r\n            IERC20(bomb).transfer(msg.sender, amtBomb.sub(resultAmtBomb));\r\n        }\r\n        return (resultAmtBomb, resultAmtEth, liquidity);\r\n    }\r\n\r\n    function setTaxableBombOracle(address _bombOracle) external onlyOperator {\r\n        ITaxable(bomb).setBombOracle(_bombOracle);\r\n    }\r\n\r\n    function transferTaxOffice(address _newTaxOffice) external onlyOperator {\r\n        ITaxable(bomb).setTaxOffice(_newTaxOffice);\r\n    }\r\n\r\n    function taxFreeTransferFrom(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amt\r\n    ) external {\r\n        require(taxExclusionEnabled[msg.sender], \"Address not approved for tax free transfers\");\r\n        _excludeAddressFromTax(_sender);\r\n        IERC20(bomb).transferFrom(_sender, _recipient, _amt);\r\n        _includeAddressInTax(_sender);\r\n    }\r\n\r\n    function setTaxExclusionForAddress(address _address, bool _excluded) external onlyOperator {\r\n        taxExclusionEnabled[_address] = _excluded;\r\n    }\r\n\r\n    function _approveTokenIfNeeded(address _token, address _router) private {\r\n        if (IERC20(_token).allowance(address(this), _router) == 0) {\r\n            IERC20(_token).approve(_router, type(uint256).max);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ITaxable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ITaxable {\r\n    function setTaxTiersTwap(uint8 _index, uint256 _value) external returns (bool);\r\n\r\n    function setTaxTiersRate(uint8 _index, uint256 _value) external returns (bool);\r\n\r\n    function enableAutoCalculateTax() external;\r\n\r\n    function disableAutoCalculateTax() external;\r\n\r\n    function taxRate() external returns (uint256);\r\n\r\n    function setTaxCollectorAddress(address _taxCollectorAddress) external;\r\n\r\n    function setTaxRate(uint256 _taxRate) external;\r\n\r\n    function setBurnThreshold(uint256 _burnThreshold) external;\r\n\r\n    function excludeAddress(address _address) external returns (bool);\r\n\r\n    function isAddressExcluded(address _address) external returns (bool);\r\n\r\n    function includeAddress(address _address) external returns (bool);\r\n\r\n    function setBombOracle(address _bombOracle) external;\r\n\r\n    function setTaxOffice(address _taxOffice) external;\r\n}\r\n"
    },
    "contracts/interfaces/IUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "contracts/TaxOffice.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./owner/Operator.sol\";\r\nimport \"./interfaces/ITaxable.sol\";\r\n\r\n/*\r\n\r\n$$$$$$$\\   $$$$$$\\  $$\\      $$\\ $$$$$$$\\                                                            \r\n$$  __$$\\ $$  __$$\\ $$$\\    $$$ |$$  __$$\\                                                           \r\n$$ |  $$ |$$ /  $$ |$$$$\\  $$$$ |$$ |  $$ |    $$$$$$\\$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n$$$$$$$\\ |$$ |  $$ |$$\\$$\\$$ $$ |$$$$$$$\\ |    $$  _$$  _$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n$$  __$$\\ $$ |  $$ |$$ \\$$$  $$ |$$  __$$\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\r\n$$ |  $$ |$$ |  $$ |$$ |\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\r\n$$$$$$$  | $$$$$$  |$$ | \\_/ $$ |$$$$$$$  |$$\\ $$ | $$ | $$ |\\$$$$$$  |$$ |  $$ |\\$$$$$$$\\ \\$$$$$$$ |\r\n\\_______/  \\______/ \\__|     \\__|\\_______/ \\__|\\__| \\__| \\__| \\______/ \\__|  \\__| \\_______| \\____$$ |\r\n                                                                                           $$\\   $$ |\r\n                                                                                           \\$$$$$$  |\r\n    http://bomb.money                                                                      \\______/ \r\n*/\r\ncontract TaxOffice is Operator {\r\n    address public bomb;\r\n\r\n    constructor(address _bomb) public {\r\n        require(_bomb != address(0), \"bomb address cannot be 0\");\r\n        bomb = _bomb;\r\n    }\r\n\r\n    function setTaxTiersTwap(uint8 _index, uint256 _value) public onlyOperator returns (bool) {\r\n        return ITaxable(bomb).setTaxTiersTwap(_index, _value);\r\n    }\r\n\r\n    function setTaxTiersRate(uint8 _index, uint256 _value) public onlyOperator returns (bool) {\r\n        return ITaxable(bomb).setTaxTiersRate(_index, _value);\r\n    }\r\n\r\n    function enableAutoCalculateTax() public onlyOperator {\r\n        ITaxable(bomb).enableAutoCalculateTax();\r\n    }\r\n\r\n    function disableAutoCalculateTax() public onlyOperator {\r\n        ITaxable(bomb).disableAutoCalculateTax();\r\n    }\r\n\r\n    function setTaxRate(uint256 _taxRate) public onlyOperator {\r\n        ITaxable(bomb).setTaxRate(_taxRate);\r\n    }\r\n\r\n    function setBurnThreshold(uint256 _burnThreshold) public onlyOperator {\r\n        ITaxable(bomb).setBurnThreshold(_burnThreshold);\r\n    }\r\n\r\n    function setTaxCollectorAddress(address _taxCollectorAddress) public onlyOperator {\r\n        ITaxable(bomb).setTaxCollectorAddress(_taxCollectorAddress);\r\n    }\r\n\r\n    function excludeAddressFromTax(address _address) external onlyOperator returns (bool) {\r\n        return ITaxable(bomb).excludeAddress(_address);\r\n    }\r\n\r\n    function includeAddressInTax(address _address) external onlyOperator returns (bool) {\r\n        return ITaxable(bomb).includeAddress(_address);\r\n    }\r\n\r\n    function setTaxableBombOracle(address _bombOracle) external onlyOperator {\r\n        ITaxable(bomb).setBombOracle(_bombOracle);\r\n    }\r\n\r\n    function transferTaxOffice(address _newTaxOffice) external onlyOperator {\r\n        ITaxable(bomb).setTaxOffice(_newTaxOffice);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/Epoch.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport '@openzeppelin/contracts/math/SafeMath.sol';\r\n\r\nimport '../owner/Operator.sol';\r\n\r\ncontract Epoch is Operator {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private period;\r\n    uint256 private startTime;\r\n    uint256 private lastEpochTime;\r\n    uint256 private epoch;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        uint256 _period,\r\n        uint256 _startTime,\r\n        uint256 _startEpoch\r\n    ) public {\r\n        period = _period;\r\n        startTime = _startTime;\r\n        epoch = _startEpoch;\r\n        lastEpochTime = startTime.sub(period);\r\n    }\r\n\r\n    /* ========== Modifier ========== */\r\n\r\n    modifier checkStartTime {\r\n        require(now >= startTime, 'Epoch: not started yet');\r\n\r\n        _;\r\n    }\r\n\r\n    modifier checkEpoch {\r\n        uint256 _nextEpochPoint = nextEpochPoint();\r\n        if (now < _nextEpochPoint) {\r\n            require(msg.sender == operator(), 'Epoch: only operator allowed for pre-epoch');\r\n            _;\r\n        } else {\r\n            _;\r\n\r\n            for (;;) {\r\n                lastEpochTime = _nextEpochPoint;\r\n                ++epoch;\r\n                _nextEpochPoint = nextEpochPoint();\r\n                if (now < _nextEpochPoint) break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    function getCurrentEpoch() public view returns (uint256) {\r\n        return epoch;\r\n    }\r\n\r\n    function getPeriod() public view returns (uint256) {\r\n        return period;\r\n    }\r\n\r\n    function getStartTime() public view returns (uint256) {\r\n        return startTime;\r\n    }\r\n\r\n    function getLastEpochTime() public view returns (uint256) {\r\n        return lastEpochTime;\r\n    }\r\n\r\n    function nextEpochPoint() public view returns (uint256) {\r\n        return lastEpochTime.add(period);\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function setPeriod(uint256 _period) external onlyOperator {\r\n        require(_period >= 1 hours && _period <= 48 hours, '_period: out of range');\r\n        period = _period;\r\n    }\r\n\r\n    function setEpoch(uint256 _epoch) external onlyOperator {\r\n        epoch = _epoch;\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\nimport \"./lib/Babylonian.sol\";\r\nimport \"./lib/FixedPoint.sol\";\r\nimport \"./lib/UniswapV2OracleLibrary.sol\";\r\nimport \"./utils/Epoch.sol\";\r\nimport \"./interfaces/IUniswapV2Pair.sol\";\r\n\r\n/*\r\n\r\n$$$$$$$\\   $$$$$$\\  $$\\      $$\\ $$$$$$$\\                                                            \r\n$$  __$$\\ $$  __$$\\ $$$\\    $$$ |$$  __$$\\                                                           \r\n$$ |  $$ |$$ /  $$ |$$$$\\  $$$$ |$$ |  $$ |    $$$$$$\\$$$$\\   $$$$$$\\  $$$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n$$$$$$$\\ |$$ |  $$ |$$\\$$\\$$ $$ |$$$$$$$\\ |    $$  _$$  _$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n$$  __$$\\ $$ |  $$ |$$ \\$$$  $$ |$$  __$$\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\r\n$$ |  $$ |$$ |  $$ |$$ |\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\r\n$$$$$$$  | $$$$$$  |$$ | \\_/ $$ |$$$$$$$  |$$\\ $$ | $$ | $$ |\\$$$$$$  |$$ |  $$ |\\$$$$$$$\\ \\$$$$$$$ |\r\n\\_______/  \\______/ \\__|     \\__|\\_______/ \\__|\\__| \\__| \\__| \\______/ \\__|  \\__| \\_______| \\____$$ |\r\n                                                                                           $$\\   $$ |\r\n                                                                                           \\$$$$$$  |\r\n    http://bomb.money                                                                      \\______/ \r\n*/\r\n// fixed window oracle that recomputes the average price for the entire period once every period\r\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\r\ncontract Oracle is Epoch {\r\n    using FixedPoint for *;\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // uniswap\r\n    address public token0;\r\n    address public token1;\r\n    IUniswapV2Pair public pair;\r\n\r\n    // oracle\r\n    uint32 public blockTimestampLast;\r\n    uint256 public price0CumulativeLast;\r\n    uint256 public price1CumulativeLast;\r\n    FixedPoint.uq112x112 public price0Average;\r\n    FixedPoint.uq112x112 public price1Average;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        IUniswapV2Pair _pair,\r\n        uint256 _period,\r\n        uint256 _startTime\r\n    ) public Epoch(_period, _startTime, 0) {\r\n        pair = _pair;\r\n        token0 = pair.token0();\r\n        token1 = pair.token1();\r\n        price0CumulativeLast = pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\r\n        price1CumulativeLast = pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\r\n        uint112 reserve0;\r\n        uint112 reserve1;\r\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\r\n        require(reserve0 != 0 && reserve1 != 0, \"Oracle: NO_RESERVES\"); // ensure that there's liquidity in the pair\r\n    }\r\n\r\n    /* ========== MUTABLE FUNCTIONS ========== */\r\n\r\n    /** @dev Updates 1-day EMA price from Uniswap.  */\r\n    function update() external checkEpoch {\r\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n\r\n        if (timeElapsed == 0) {\r\n            // prevent divided by zero\r\n            return;\r\n        }\r\n\r\n        // overflow is desired, casting never truncates\r\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\r\n        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\r\n        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\r\n\r\n        price0CumulativeLast = price0Cumulative;\r\n        price1CumulativeLast = price1Cumulative;\r\n        blockTimestampLast = blockTimestamp;\r\n\r\n        emit Updated(price0Cumulative, price1Cumulative);\r\n    }\r\n\r\n    // note this will always return 0 before update has been called successfully for the first time.\r\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut) {\r\n        if (_token == token0) {\r\n            amountOut = price0Average.mul(_amountIn).decode144();\r\n        } else {\r\n            require(_token == token1, \"Oracle: INVALID_TOKEN\");\r\n            amountOut = price1Average.mul(_amountIn).decode144();\r\n        }\r\n    }\r\n\r\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut) {\r\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n        if (_token == token0) {\r\n            _amountOut = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed)).mul(_amountIn).decode144();\r\n        } else if (_token == token1) {\r\n            _amountOut = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed)).mul(_amountIn).decode144();\r\n        }\r\n    }\r\n\r\n    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\r\n}\r\n"
    },
    "contracts/lib/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Babylonian.sol\";\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\r\n    uint256 private constant Q224 = Q112 << RESOLUTION;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\r\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112(self._x / uint224(x));\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\r\n        uint256 z;\r\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // take the reciprocal of a UQ112x112\r\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        require(self._x != 0, \"FixedPoint: ZERO_RECIPROCAL\");\r\n        return uq112x112(uint224(Q224 / self._x));\r\n    }\r\n\r\n    // square root of a UQ112x112\r\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\r\n    }\r\n}\r\n"
    },
    "contracts/lib/UniswapV2OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./FixedPoint.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2**32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(address pair)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 price0Cumulative,\r\n            uint256 price1Cumulative,\r\n            uint32 blockTimestamp\r\n        )\r\n    {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\r\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "contracts/lib/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\r\n        require(reserveA > 0 && reserveB > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(reserveIn > 0 && reserveOut > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        require(reserveIn > 0 && reserveOut > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}